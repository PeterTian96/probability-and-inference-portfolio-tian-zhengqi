)
size
probability<-c(0.01, 0.05, 0.10, 0.25, 0.50)
probability
data<-data.frame(size = rep(size, length(probability)), probability = rep(probability, length(size)), Abs_Error = rep(NA, length(probability) * length(size)),Rel_Error = rep(NA, length(probability) * length(size)),name=size)
for (i in 1:nrow(data)) {
row = data[i, ]
size = row[["size"]]
probability = row[["probability"]]
Abs=mean(abs((rbinom(1000, size, probability) / size) - probability))
Rel= mean(abs((rbinom(1000, size, probability) / size) - probability) / probability)
data[i, "Abs_Error"] = Abs
data[i, "Rel_Error"] = Rel
}
data
ggplot(data, aes(size, Abs_Error, color = factor(probability))) +
geom_point() +
geom_line(aes(group = probability)) +
scale_x_continuous(trans = "log2") +
ylab("Absolute Error")
ggplot(data, aes(size, Rel_Error, color = factor(probability))) +
geom_point() +
geom_line(aes(group = probability)) +
scale_x_continuous(trans = "log2") +
ylab("Related Error")
for (i in 1:nrow(params)) {
row = params[i, ] # 某一行
s = row[["size"]] # 某一行的样本数
p = row[["probability"]] # 某一行的盖率
re = abs((mean(rbinom(1000, s, p) / s) - p) / p) # 根据该行计算相对误差
params[i, "rel_error"] = re
}
require(scales)
size<-NULL
size[1]<-2
for(i in 2:14)(
size[i]=size[i-1]*2
)
size
probability<-c(0.01, 0.05, 0.10, 0.25, 0.50)
probability
params <- data.frame(size = rep(size, length(probability)), probability = rep(probability, length(size)), rel_error = rep(NA, length(probability) * length(size)))
params
library(ggplot2)
library(dplyr)
for (i in 1:nrow(params)) {
row = params[i, ] # 某一行
s = row[["size"]] # 某一行的样本数
p = row[["probability"]] # 某一行的盖率
re = abs((mean(rbinom(1000, s, p) / s) - p) / p) # 根据该行计算相对误差
params[i, "rel_error"] = re
}
params <- params %>%
mutate(label = if_else(size == 2, paste("p =", probability), ""))
ggplot(params, aes(size, rel_error, color = factor(probability))) +
geom_point() +
geom_line(aes(group = probability)) +
geom_text(aes(label = label)) + # 因为 p = 2 之外 label 都是空的，不会显示
scale_x_continuous(trans = "log2") # 对数轴
#data_Frame
Abs_Error<-matrix(NA,5,14)
Rel_Error<-matrix(NA,5,14)
n=1
for(i in 1:5){
for(j in 1:14) {
Abs_Error[i,j]=abs((mean(rbinom(1000,size[j],probability[i])))/size[j]-probability[i])
Rel_Error[i,j]=abs((mean(rbinom(1000,size[j],probability[i])))/size[j]-probability[i])/probability[i]
}
}
#set.seed(3)
Abs_Error<-data.frame(t(Abs_Error))
colnames(Abs_Error)<-probability
rownames(Abs_Error)<-size
Abs_Error
Rel_Error<-data.frame(t(Rel_Error))
#set.seed(2)
colnames(Rel_Error)<-probability
rownames(Rel_Error)<-size
Rel_Error
#Abs_Error_Visualization
ggplot()+geom_line(data=Abs_Error,aes(x=log2(size),y=`0.5`),color="red",linetype="dashed")+geom_point(data=Abs_Error,aes(x=log2(size),y=`0.5`),color="red")+geom_line(data=Abs_Error,aes(x=log2(size),y=`0.01`),color="green",linetype="dashed")+geom_point(data=Abs_Error,aes(x=log2(size),y=`0.01`),color="green")+geom_line(data=Abs_Error,aes(x=log2(size),y=`0.1`),color="yellow",linetype="dashed")+geom_point(data=Abs_Error,aes(x=log2(size),y=`0.1`),color="yellow")+geom_line(data=Abs_Error,aes(x=log2(size),y=`0.1`),color="yellow",linetype="dashed")+geom_point(data=Abs_Error,aes(x=log2(size),y=`0.1`),color="yellow")+geom_line(data=Abs_Error,aes(x=log2(size),y=`0.25`),color="blue",linetype="dashed")+geom_point(data=Abs_Error,aes(x=log2(size),y=`0.25`),color="blue")+geom_line(data=Abs_Error,aes(x=log2(size),y=`0.5`),color="orange",linetype="dashed")+geom_point(data=Abs_Error,aes(x=log2(size),y=`0.5`),color="orange")+labs(x="Log Scale",y="Absolute Error")+scale_x_log10()
#Rel_Error_Visualization
ggplot()+geom_line(data=Rel_Error,aes(x=log2(size),y=`0.5`),color="red",linetype="dashed")+geom_point(data=Rel_Error,aes(x=log2(size),y=`0.5`),color="red")+geom_line(data=Rel_Error,aes(x=log2(size),y=`0.01`),color="green",linetype="dashed")+geom_point(data=Rel_Error,aes(x=log2(size),y=`0.01`),color="green")+geom_line(data=Rel_Error,aes(x=log2(size),y=`0.1`),color="yellow",linetype="dashed")+geom_point(data=Rel_Error,aes(x=log2(size),y=`0.1`),color="yellow")+geom_line(data=Rel_Error,aes(x=log2(size),y=`0.1`),color="yellow",linetype="dashed")+geom_point(data=Rel_Error,aes(x=log2(size),y=`0.1`),color="yellow")+geom_line(data=Rel_Error,aes(x=log2(size),y=`0.25`),color="blue",linetype="dashed")+geom_point(data=Rel_Error,aes(x=log2(size),y=`0.25`),color="blue")+geom_line(data=Rel_Error,aes(x=log2(size),y=`0.5`),color="orange",linetype="dashed")+geom_point(data=Rel_Error,aes(x=log2(size),y=`0.5`),color="orange")+labs(x="Log Scale",y="Relative Error")+scale_x_log10()
require(tidyverse)
library(ggplot2)
require(scales)
size<-NULL
size[1]<-2
for(i in 2:14)(
size[i]=size[i-1]*2
)
size
probability<-c(0.01, 0.05, 0.10, 0.25, 0.50)
probability
data<-data.frame(size = rep(size, length(probability)), probability = rep(probability, length(size)), Abs_Error = rep(NA, length(probability) * length(size)),Rel_Error = rep(NA, length(probability) * length(size)))
for (i in 1:nrow(data)) {
row = data[i, ]
size = row[["size"]]
probability = row[["probability"]]
Abs=mean(abs((rbinom(1000, size, probability) / size) - probability))
Rel= mean(abs((rbinom(1000, size, probability) / size) - probability) / probability)
data[i, "Abs_Error"] = Abs
data[i, "Rel_Error"] = Rel
}
data
ggplot(data, aes(size, Abs_Error, color = factor(probability))) +
geom_point() +
geom_line(aes(group = probability)) +
scale_x_continuous(trans = "log2") +
ylab("Absolute Error")
ggplot(data, aes(size, Rel_Error, color = factor(probability))) +
geom_point() +
geom_line(aes(group = probability)) +
scale_x_continuous(trans = "log2") +
ylab("Related Error")
data <- data %>%
mutate(label = if_else(size==size, paste("p =", probability), ""))
data <- data %>%
mutate(label = if_else(size==size, paste("p =", probability), ""))
data
data <- data %>%
mutate(label = size)
data
data <- data %>%
mutate(label = probability)
data
ggplot(data, aes(size, Abs_Error, color = factor(probability))) +
geom_point() +
geom_line(aes(group = probability)) +
scale_x_continuous(trans = "log2") +
geom_text(aes(label = label)) +
ylab("Absolute Error")
ggplot(data, aes(size, Rel_Error, color = factor(probability))) +
geom_point() +
geom_line(aes(group = probability)) +
scale_x_continuous(trans = "log2") +
geom_text(aes(label = label)) +
ylab("Related Error")
ggplot(data, aes(size, Abs_Error, color = factor(probability))) +
geom_point() +
geom_line(aes(group = probability)) +
scale_x_continuous(trans = "log2") +
geom_text(aes(label = label)) +
ylab("Absolute Error")
ggplot(data, aes(size, Rel_Error, color = factor(probability))) +
geom_point() +
geom_line(aes(group = probability)) +
scale_x_continuous(trans = "log2") +
lst(first.points) +
ylab("Related Error")
ggplot(data, aes(size, Abs_Error, color = factor(probability))) +
geom_point() +
geom_line(aes(group = probability)) +
scale_x_continuous(trans = "log2") +
geom_text(aes(label = label)) +
ylab("Absolute Error")
ggplot(data, aes(size, Rel_Error, color = factor(probability))) +
geom_point() +
geom_line(aes(group = probability)) +
scale_x_continuous(trans = "log2") +
list(first.points) +
ylab("Related Error")
ggplot(midwest, aes(x=area, y=poptotal),col=state) +geom_point(aes(col=state),size=3,alpha=0.5)
g1 <- ggplot(midwest, aes(x=area, y=poptotal)) +
geom_point(aes(col=state), size=3, alpha=.5)
g2 <- g1 + labs(
title="Population vs. Area",
subtitle="Midwest Demographics",
y="Population",
x="Area"
) +
theme_classic()
g2
# turn off scientific notation
options(scipen=999)
g1 <- ggplot(midwest, aes(x=area, y=poptotal)) +
geom_point(aes(col=state), size=3, alpha=.5)
# adding theme Layer itself.
g1 <- g1 + theme_bw() +
labs(subtitle="BW Theme")
g1 <- g1 + theme_classic() +
labs(subtitle="Classic Theme")
# turn off scientific notation
options(scipen=999)
g1 <- ggplot(midwest, aes(x=area, y=poptotal)) +
geom_point(aes(col=state), size=3, alpha=.5)
# adding theme Layer itself.
g1 <- g1 + theme_bw() +
labs(subtitle="BW Theme")
g1 <- g1 + theme_classic() +
labs(subtitle="Classic Theme")
# Change Axis Texts
g3 <- g2 + scale_y_continuous(
breaks=seq(0, 1000000, 200000),
labels = function(x){paste0(x/1000, 'K')}
)
g3
ggplot(data, aes(size, Abs_Error, color = factor(probability))) +
geom_point() +
geom_line(aes(group = probability)) +
scale_x_continuous(trans = "log2") +
geom_text(aes(label = label)) +
ylab("Absolute Error")
diect.label(ggplot(data, aes(size, Rel_Error, color = factor(probability))) +
geom_point() +
geom_line(aes(group = probability)) +
scale_x_continuous(trans = "log2") +
list(first.points) +
ylab("Related Error"))
# what is the general layout of the data?
midwest
# what are the dimensions?
nrow(midwest)
ncol(midwest)
# how can we get a quick stat summary of each variable
# is midwest a dataframe?
class(midwest)
# Change Axis Texts
g3 <- g2 + scale_y_continuous(
breaks=seq(0, 1000000, 200000),
labels = function(x){paste0(x/1000, 'K')}
)
g3
require(tidyverse)
library(ggplot2)
require(scales)
library(directlabels)
require(tidyverse)
library(ggplot2)
require(scales)
require(directlabels)
require(tidyverse)
library(ggplot2)
require(scales)
require(directlabels)
size<-NULL
size[1]<-2
for(i in 2:14)(
size[i]=size[i-1]*2
)
size
probability<-c(0.01, 0.05, 0.10, 0.25, 0.50)
probability
data<-data.frame(size = rep(size, length(probability)), probability = rep(probability, length(size)), Abs_Error = rep(NA, length(probability) * length(size)),Rel_Error = rep(NA, length(probability) * length(size)))
for (i in 1:nrow(data)) {
row = data[i, ]
size = row[["size"]]
probability = row[["probability"]]
Abs=mean(abs((rbinom(1000, size, probability) / size) - probability))
Rel= mean(abs((rbinom(1000, size, probability) / size) - probability) / probability)
data[i, "Abs_Error"] = Abs
data[i, "Rel_Error"] = Rel
}
data
data <- data %>%
mutate(label = probability)
data
ggplot(data, aes(size, Abs_Error, color = factor(probability))) +
geom_point() +
geom_line(aes(group = probability)) +
scale_x_continuous(trans = "log2") +
geom_text(aes(label = label)) +
ylab("Absolute Error")
diect.label(ggplot(data, aes(size, Rel_Error, color = factor(probability))) +
geom_point() +
geom_line(aes(group = probability)) +
scale_x_continuous(trans = "log2") +
list(first.points) +
ylab("Related Error"))
ggplot(data, aes(size, Abs_Error, color = factor(probability))) +
geom_point() +
geom_line(aes(group = probability)) +
scale_x_continuous(trans = "log2") +
geom_text(aes(label = label)) +
ylab("Absolute Error")
direct.label(ggplot(data, aes(size, Rel_Error, color = factor(probability))) +
geom_point() +
geom_line(aes(group = probability)) +
scale_x_continuous(trans = "log2") +
list(first.points) +
ylab("Related Error"))
ggplot(data, aes(size, Abs_Error, color = factor(probability))) +
geom_point() +
geom_line(aes(group = probability)) +
scale_x_continuous(trans = "log2") +
geom_text(aes(label = label)) +
ylab("Absolute Error")
direct.label(ggplot(data, aes(size, Rel_Error, color = factor(probability))) +
geom_point() +
geom_line(aes(group = probability)) +
scale_x_continuous(trans = "log2") +
list(first.points) +
ylab("Related Error"))
# Change Axis Texts
g3 <- g2 + scale_y_continuous(
breaks=seq(0, 1000000, 200000),
labels = function(x){paste0(x/1000, 'K')}
)
g3 <- g2 + scale_y_continuous(
breaks=seq(0, 1000000, 200000),
labels = function(x){paste0(x/1000, 'K')}
)+theme_classic()
# Change Axis Texts
g3 <- g2 + scale_y_continuous(
breaks=seq(0, 1000000, 200000),
labels = function(x){paste0(x/1000, 'K')}
)
g3 <- g2 + scale_y_continuous(
breaks=seq(0, 1000000, 200000),
labels = function(x){paste0(x/1000, 'K')}
)+theme_classic()
# Change Axis Texts
g3 <- g2 + scale_y_continuous(
breaks=seq(0, 1000000, 200000),
labels = function(x){paste0(x/1000, 'K')}
)
g3 <- g2 + scale_y_continuous(
breaks=seq(0, 1000000, 200000),
labels = function(x){paste0(x/1000, 'K')}
)+theme_classic()
g3
midwest_pop <- ggplot(midwest, aes(x=area, y=poptotal))
midwest_pop
knitr::opts_chunk$set(echo = T,
results = "hide")
# packages you need libraried for today
library(dplyr)
library(ggplot2)
metro_nash_schools <- read.csv("metro-nash-schools.csv")
head(metro_nash_schools)
# student code:
class(metro_nash_schools)
# student code:
class(metro_nash_schools)
# packages you need libraried for today
library(dplyr)
library(ggplot2)
metro_nash_schools <- read.csv("metro-nash-schools.csv")
head(metro_nash_schools)
knitr::opts_chunk$set(echo = T,
results = "hide")
# Chunk 1: setup
knitr::opts_chunk$set(echo = T,
results = "hide")
# Chunk 2
# packages you need libraried for today
library(dplyr)
library(ggplot2)
metro_nash_schools <- read.csv("metro-nash-schools.csv")
head(metro_nash_schools)
# Chunk 3
# student code:
class(metro_nash_schools)
# Chunk 4
#student code
# Chunk 5
#student code
# Chunk 6
#student code
# Chunk 7
#student code
# Chunk 8
# scatterplot, student code:
knitr::opts_chunk$set(echo = T,
results = "hide")
# packages you need libraried for today
library(dplyr)
library(ggplot2)
metro_nash_schools <- read.csv("metro-nash-schools.csv")
head(metro_nash_schools)
require(scales)
size<-NULL
size[1]<-2
for(i in 2:14)(
size[i]=size[i-1]*2
)
size
probability<-c(0.01, 0.05, 0.10, 0.25, 0.50)
probability
params <- data.frame(size = rep(size, length(probability)), probability = rep(probability, length(size)), rel_error = rep(NA, length(probability) * length(size)))
params
library(ggplot2)
library(dplyr)
for (i in 1:nrow(params)) {
row = params[i, ] # 某一行
s = row[["size"]] # 某一行的样本数
p = row[["probability"]] # 某一行的盖率
re = abs((mean(rbinom(1000, s, p) / s) - p) / p) # 根据该行计算相对误差
params[i, "rel_error"] = re
}
params <- params %>%
mutate(label = if_else(size == 2, paste("p =", probability), ""))
ggplot(params, aes(size, rel_error, color = factor(probability))) +
geom_point() +
geom_line(aes(group = probability)) +
geom_text(aes(label = label)) + # 因为 p = 2 之外 label 都是空的，不会显示
scale_x_continuous(trans = "log2") # 对数轴
#data_Frame
Abs_Error<-matrix(NA,5,14)
Rel_Error<-matrix(NA,5,14)
n=1
for(i in 1:5){
for(j in 1:14) {
Abs_Error[i,j]=abs((mean(rbinom(1000,size[j],probability[i])))/size[j]-probability[i])
Rel_Error[i,j]=abs((mean(rbinom(1000,size[j],probability[i])))/size[j]-probability[i])/probability[i]
}
}
#set.seed(3)
Abs_Error<-data.frame(t(Abs_Error))
colnames(Abs_Error)<-probability
rownames(Abs_Error)<-size
Abs_Error
Rel_Error<-data.frame(t(Rel_Error))
#set.seed(2)
colnames(Rel_Error)<-probability
rownames(Rel_Error)<-size
Rel_Error
#Abs_Error_Visualization
ggplot()+geom_line(data=Abs_Error,aes(x=log2(size),y=`0.5`),color="red",linetype="dashed")+geom_point(data=Abs_Error,aes(x=log2(size),y=`0.5`),color="red")+geom_line(data=Abs_Error,aes(x=log2(size),y=`0.01`),color="green",linetype="dashed")+geom_point(data=Abs_Error,aes(x=log2(size),y=`0.01`),color="green")+geom_line(data=Abs_Error,aes(x=log2(size),y=`0.1`),color="yellow",linetype="dashed")+geom_point(data=Abs_Error,aes(x=log2(size),y=`0.1`),color="yellow")+geom_line(data=Abs_Error,aes(x=log2(size),y=`0.1`),color="yellow",linetype="dashed")+geom_point(data=Abs_Error,aes(x=log2(size),y=`0.1`),color="yellow")+geom_line(data=Abs_Error,aes(x=log2(size),y=`0.25`),color="blue",linetype="dashed")+geom_point(data=Abs_Error,aes(x=log2(size),y=`0.25`),color="blue")+geom_line(data=Abs_Error,aes(x=log2(size),y=`0.5`),color="orange",linetype="dashed")+geom_point(data=Abs_Error,aes(x=log2(size),y=`0.5`),color="orange")+labs(x="Log Scale",y="Absolute Error")+scale_x_log10()
#Rel_Error_Visualization
ggplot()+geom_line(data=Rel_Error,aes(x=log2(size),y=`0.5`),color="red",linetype="dashed")+geom_point(data=Rel_Error,aes(x=log2(size),y=`0.5`),color="red")+geom_line(data=Rel_Error,aes(x=log2(size),y=`0.01`),color="green",linetype="dashed")+geom_point(data=Rel_Error,aes(x=log2(size),y=`0.01`),color="green")+geom_line(data=Rel_Error,aes(x=log2(size),y=`0.1`),color="yellow",linetype="dashed")+geom_point(data=Rel_Error,aes(x=log2(size),y=`0.1`),color="yellow")+geom_line(data=Rel_Error,aes(x=log2(size),y=`0.1`),color="yellow",linetype="dashed")+geom_point(data=Rel_Error,aes(x=log2(size),y=`0.1`),color="yellow")+geom_line(data=Rel_Error,aes(x=log2(size),y=`0.25`),color="blue",linetype="dashed")+geom_point(data=Rel_Error,aes(x=log2(size),y=`0.25`),color="blue")+geom_line(data=Rel_Error,aes(x=log2(size),y=`0.5`),color="orange",linetype="dashed")+geom_point(data=Rel_Error,aes(x=log2(size),y=`0.5`),color="orange")+labs(x="Log Scale",y="Relative Error")+scale_x_log10()
g1 <- g1 + scale_y_continuous(breaks=seq(0, 1000000, 200000), labels = function(x){paste0(x/1000, 'K')})
# Demographic information of midwest counties
# https://ggplot2.tidyverse.org/reference/midwest.html
data("midwest", package = "ggplot2")
g1 <- g1 + scale_y_continuous(breaks=seq(0, 1000000, 200000), labels = function(x){paste0(x/1000, 'K')})
# Change Axis Texts
g3 <- g2 + scale_y_continuous(
breaks=seq(0, 1000000, 200000),
labels = function(x){paste0(x/1000, 'K')}
)
g3 <- g2 + scale_y_continuous(
breaks=seq(0, 1000000, 200000),
labels = function(x){paste0(x/1000, 'K')}
)+theme_classic()
g3
# Chunk 1
library(ggplot2)
packageVersion("ggplot2")
# Chunk 2
# Demographic information of midwest counties
# https://ggplot2.tidyverse.org/reference/midwest.html
data("midwest", package = "ggplot2")
# Chunk 3
# what is the general layout of the data?
midwest
# what are the dimensions?
nrow(midwest)
ncol(midwest)
# how can we get a quick stat summary of each variable
# is midwest a dataframe?
class(midwest)
# Chunk 4
# area and poptotal are columns in 'midwest'
ggplot(midwest,aes(x=area,y=poptotal))+geom_point()
# Chunk 5
# simple bivariate examination requires a geom
ggplot(midwest, aes(x=area, y=poptotal))
# Chunk 6
ggplot(midwest, aes(x=area, y=poptotal)) +
geom_point(col="steelblue")
# Chunk 7
ggplot(midwest, aes(x=area, y=poptotal),col=state) +geom_point(aes(col=state),size=3,alpha=0.5)
# Chunk 8
# Chunk 9
ggplot(midwest, aes(x=area, y=poptotal)) +
# Chunk 10
# turn off scientific notation
options(scipen=999)
g1 <- ggplot(midwest, aes(x=area, y=poptotal)) +
geom_point(aes(col=state), size=3, alpha=.5)
# adding theme Layer itself.
g1 <- g1 + theme_bw() +
labs(subtitle="BW Theme")
g1 <- g1 + theme_classic() +
labs(subtitle="Classic Theme")
# Chunk 11
g1 <- ggplot(midwest, aes(x=area, y=poptotal)) +
geom_point(aes(col=state), size=3, alpha=.5)
g2 <- g1 + labs(
title="Population vs. Area",
subtitle="Midwest Demographics",
y="Population",
x="Area"
) +
theme_classic()
g2
# Chunk 12
# Change Axis Texts
g3 <- g2 + scale_y_continuous(
breaks=seq(0, 1000000, 200000),
labels = function(x){paste0(x/1000, 'K')}
)
g3 <- g2 + scale_y_continuous(
breaks=seq(0, 1000000, 200000),
labels = function(x){paste0(x/1000, 'K')}
)+theme_classic()
g3
# Chunk 13
midwest_pop <- ggplot(midwest, aes(x=area, y=poptotal)) +
midwest_pop
# Chunk 14
# Change Axis Texts
g3 <- g2 + scale_y_continuous(
breaks=seq(0, 1000000, 200000),
labels = function(x){paste0(x/1000, 'K')}
)
g3 <- g2 + scale_y_continuous(
breaks=seq(0, 1000000, 200000),
labels = function(x){paste0(x/1000, 'K')}
)+theme_classic()
g3
