data[i, "Abs_Error"] = Abs
data[i, "Rel_Error"] = Rel
}
#set.seed(13)
data
knitr::opts_chunk$set(echo = TRUE)
# random seed set
set.seed(1)
library(tidyverse)
library(ggplot2)
# generate the experiment
test_size <- 100000 # parameter for the rbinom function
# generate the vector for sizes
size <- NA
for(i in 2:15) {
size[i-1] <- 2**i
}
# generate the vector for probabilities
prob <- c(0.01,0.05,0.1,0.2,0.5)
# generate the empty data frame for recording the inputs and outputs
data <- data.frame(matrix(NA,70,4))
colnames(data) <- c("size","p", "abs_error", "rel_error")
# set a count for experiment and start generation
count <- 1
for(i in 1:14) {
for(j in 1:5) {
data[count,1] <- size[i]
data[count,2] <- prob[j]
temp <- rbinom(test_size,size[i],prob[j]) #further explanation for it below
data[count, 3] <- mean(abs(temp/size[i] - prob[j]))
data[count, 4] <- data[count,3]/prob[j]
count <- count + 1;
}
}
data$p <- factor(data$p)
(g1 <- ggplot(data, aes(x=size,y=abs_error, factor=p)) + geom_line(aes(color=p)) + geom_point(aes(color=p)) + labs(title = 'Absolute error vs. size', y='Absolute error'))
(
g1 <- ggplot(data,
aes(
x= log(size,2),
y=abs_error,
factor=p
)
) +
geom_line(aes(color=p)) +
geom_point(aes(color=p)) +
labs(
title = 'Absolute error vs. size(in log2 scale)',
x = 'size in log2 scale',
y = 'Absolute error'
)
)
(
g1_v2 <- ggplot(data,
aes(
x= log(size,2),
y= log(abs_error,2),
factor=p
)
) +
geom_line(aes(color=p)) +
geom_point(aes(color=p)) +
labs(
title = 'Absolute error vs. size (both in log2 scale)',
x = 'size in log2 scale',
y = 'Absolute error in log2 scale'
)
)
(
g2 <- ggplot(data,
aes(
x= log(size,2),
y= rel_error,
factor=p
)
) +
geom_line(aes(color=p)) +
geom_point(aes(color=p)) +
labs(
title = 'Relative error vs. size(in log2 scale)',
x = 'size in log2 scale',
y = 'Relative error'
)
)
(
g2_v2 <- ggplot(data,
aes(
x= log(size,2),
y= log(rel_error,2),
factor=p
)
) +
geom_line(aes(color=p)) +
geom_point(aes(color=p)) +
labs(
title = 'Relative error vs. size (both in log2 scale)',
x = 'size in log2 scale',
y = 'Relative error in log2 scale'
)
)
View(data)
View(data)
size <- NA
for(i in 2:15) {
size[i-1] <- 2**i
}
size
size<-NULL
size[1]<-2
for(i in 2:14)(
size[i]=size[i-1]*2
)
size
size <- NA
for(i in 2:15) {
size[i-1] <- 2**i
}
size
size <- NULL
for(i in 2:15) {
size[i-1] <- 2**i
}
size
size <- NULL
for(i in 2:15) {
size[i-1] <- 2**i
}
size
probability<-c(0.01, 0.05, 0.10, 0.25, 0.50)
probability
size <- NULL
for(i in 2:15) {
size[i-1] <- 2**i
}
size
data<-data.frame(size = rep(size, length(probability)), probability = rep(probability, length(size)), Abs_Error = rep(NA, length(probability) * length(size)),Rel_Error = rep(NA, length(probability) * length(size)))
for (i in 1:nrow(data)) {
size =data$size[i]
probability = data$probability[i]
Abs=mean(abs((rbinom(1e4, size, probability) / size)-probability))
Rel= mean(abs(((rbinom(1e4, size, probability) / size) - probability)/ probability))
data[i, "Abs_Error"] = Abs
data[i, "Rel_Error"] = Rel
}
#set.seed(13)
data
require(ggplot2)
ggplot(data, aes(size, Abs_Error, color = factor(probability))) +
geom_point() +
geom_line(aes(group = probability)) +
scale_x_continuous(trans = "log2") +
ylab("Absolute Error")
require(ggplot2)
ggplot(data, aes(size, Rel_Error, color = factor(probability))) +
geom_point() +
geom_line(aes(group = probability)) +
scale_x_continuous(trans = "log2") +
ylab("Relative Error")
data<-data.frame(size = rep(size, length(probability)), probability = rep(probability, length(size)), Abs_Error = rep(NA, length(probability) * length(size)),Rel_Error = rep(NA, length(probability) * length(size)))
for (i in 1:nrow(data)) {
size =data$size[i]
probability = data$probability[i]
Abs=mean(abs((rbinom(1e4, size, probability) / size)-probability))
Rel= mean(abs(((rbinom(1e4, size, probability) / size) - probability)/ probability))
data[i, "Abs_Error"] = Abs
data[i, "Rel_Error"] = Rel
}
set.seed(1)
data
require(tidyverse)
library(ggplot2)
require(scales)
size<-NULL
size[1]<-2
for(i in 2:14)(
size[i]=size[i-1]*2
)
size
probability<-c(0.01, 0.05, 0.10, 0.25, 0.50)
probability
data<-data.frame(size = rep(size, length(probability)), probability = rep(probability, length(size)), Abs_Error = rep(NA, length(probability) * length(size)),Rel_Error = rep(NA, length(probability) * length(size)))
for (i in 1:nrow(data)) {
size =data$size[i]
probability = data$probability[i]
Abs=mean(abs((rbinom(1000, size, probability) / size) - probability))
Rel= mean(abs((rbinom(1000, size, probability) / size) - probability) / probability)
data[i, "Abs_Error"] = Abs
data[i, "Rel_Error"] = Rel
}
set.seed(30)
data
ggplot(data, aes(size, Abs_Error, color = factor(probability))) +
geom_point() +
geom_line(aes(group = probability)) +
scale_x_continuous(trans = "log2") +
ylab("Absolute Error")
ggplot(data, aes(size, Rel_Error, color = factor(probability))) +
geom_point() +
geom_line(aes(group = probability)) +
scale_x_continuous(trans = "log2") +
ylab("Related Error")
require(tidyverse)
library(ggplot2)
require(scales)
size<-NULL
size[1]<-2
for(i in 2:14)(
size[i]=size[i-1]*2
)
size
probability<-c(0.01, 0.05, 0.10, 0.25, 0.50)
probability
data<-data.frame(size = rep(size, length(probability)), probability = rep(probability, length(size)), Abs_Error = rep(NA, length(probability) * length(size)),Rel_Error = rep(NA, length(probability) * length(size)))
for (i in 1:nrow(data)) {
size =data$size[i]
probability = data$probability[i]
Abs=mean(abs((rbinom(1000, size, probability) / size) - probability))
Rel= mean(abs((rbinom(1000, size, probability) / size) - probability) / probability)
data[i, "Abs_Error"] = Abs
data[i, "Rel_Error"] = Rel
}
set.seed(30)
data
ggplot(data, aes(size, Abs_Error, color = factor(probability))) +
geom_point() +
geom_line(aes(group = probability)) +
scale_x_continuous(trans = "log2") +
ylab("Absolute Error")
ggplot(data, aes(size, Rel_Error, color = factor(probability))) +
geom_point() +
geom_line(aes(group = probability)) +
scale_x_continuous(trans = "log2") +
ylab("Related Error")
probability<-c(0.01, 0.05, 0.10, 0.25, 0.50)
probability
size <- NULL
for(i in 2:15) {
size[i-1] <- 2**i
}
size
data<-data.frame(size = rep(size, length(probability)), probability = rep(probability, length(size)), Abs_Error = rep(NA, length(probability) * length(size)),Rel_Error = rep(NA, length(probability) * length(size)))
for (i in 1:nrow(data)) {
size =data$size[i]
probability = data$probability[i]
Abs=mean(abs((rbinom(1e4, size, probability) / size)-probability))
Rel= mean(abs(((rbinom(1e4, size, probability) / size) - probability)/ probability))
data[i, "Abs_Error"] = Abs
data[i, "Rel_Error"] = Rel
}
set.seed(1)
data
require(ggplot2)
ggplot(data, aes(size, Abs_Error, color = factor(probability))) +
geom_point() +
geom_line(aes(group = probability)) +
scale_x_continuous(trans = "log2") +
ylab("Absolute Error")
require(ggplot2)
ggplot(data, aes(size, Rel_Error, color = factor(probability))) +
geom_point() +
geom_line(aes(group = probability)) +
scale_x_continuous(trans = "log2") +
ylab("Relative Error")
library(tidyverse)
library(janitor)
library(maps)
install.packages("maps")
install.packages("nycflights13")
library(tidyverse)
library(janitor)
library(maps)
library(nycflights13)
library(tidyverse)
library(janitor)
library(maps)
library(nycflights13)
special_days <- tribble(
~year, ~month, ~day, ~holiday,
2013, 01, 01, "New Years Day",
2013, 07, 04, "Independence Day",
2013, 11, 29, "Thanksgiving Day",
2013, 12, 25, "Christmas Day"
)
#Here, we know that new years day, independence day, thanks giveing day, and christmans day are specials days annully. Thus we want to count the pessangers amount in each festival. Thus, we are able to create a tThe primary key of the table would be the (year, month, day) columns. The (year, month, day) columns could be used to join special_days with other tables.
out<-sample(LETTERS,3 replace=T)
LETTER<-c(na)
LETTER<-c(NA)
for(i for 26){
LETTERS<-c("A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z")
out<-sample(LETTERS,3 replace=T)
LETTERS<-c("A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z")
out<-sample(LETTERS,3, replace=T)
out
special_days <- tibble(
~year, ~month, ~day, ~holiday,
2013, 01, 01, "New Years Day",
2013, 07, 04, "Independence Day",
2013, 11, 29, "Thanksgiving Day",
2013, 12, 25, "Christmas Day"
)
special_days <- tribble(
~year, ~month, ~day, ~holiday,
2013, 01, 01, "New Years Day",
2013, 07, 04, "Independence Day",
2013, 11, 29, "Thanksgiving Day",
2013, 12, 25, "Christmas Day"
)
#Here, we know that new years day, independence day, thanks giveing day, and christmans day are specials days annully. Thus we want to count the pessangers amount in each festival. Thus, we are able to create a tThe primary key of the table would be the (year, month, day) columns. The (year, month, day) columns could be used to join special_days with other tables.
#choose
choose(3,2)
#choose
choose(3,4)
#choose
choose(50,4)
#choose
choose(26,3)
? choose
#choose
#  What is the prob that the folling HAND resultsin "TOM"
#out<-sample(LETTERS,3, replace=F)
choose(26,3)
C(3,26) = A(3,3)/A(3,26)
pbinom(1,10,0.5)
pbinom(1,10,0.5)
#how do we calculate P(2 heads in 4 flips)?
choosew(4,2)
pbinom(1,10,0.5)
#how do we calculate P(2 heads in 4 flips)?
choose(4,2)
pbinom(1,10,0.5)
#how do we calculate P(2 heads in 4 flips)?
choose(4,2)
pbinom(1,6,0.5)
pbinom(1,10,0.5)
#how do we calculate P(2 heads in 4 flips)?
choose(4,2)
pbinom(1,10,0.5)
#how do we calculate P(4 wins in 7 games)?
choose(7,4)
pbinom(1,10,0.5)
#how do we calculate P(2 heads in 4 flips)?
choose(4,2)
pbinom(1,10,0.5)
#how do we calculate P(4 wins in 7 games)?
choose(7,4)
#how do we calculate P(4 wins in 4 games)?
choose(4,4)
pbinom(1,10,0.5)
#how do we calculate P(2 heads in 4 flips)?
choose(4,2)
#probability 2 heads in 4 flips when p=0.5?-概率函数
dbinom(2,4,0.5)
#probability 2 heads or fewer in 4 flips when p=0.5?
pbinom(2,4,0.5)
#pseudo-random draw of the number of head in 10 4 flips when p=0.75?
rbinom(1,10,0.75)
#Sample
#how do we calculate P(4 wins in 7 games)?
choose(7,4)
#probability 2
#how do we calculate P(2 heads in 4 flips)?
choose(4,2)
#probability 2 heads in 4 flips when p=0.5?-概率函数
dbinom(2,4,0.5)
#probability 2 heads or fewer in 4 flips when p=0.5?
pbinom(2,4,0.5)
#pseudo-random draw of the number of head in 10 4 flips when p=0.75?
rbinom(1,10,0.75)
#Sample
#how do we calculate P(4 wins in 7 games)?
choose(7,4)
#probability 2
#how do we calculate P(2 heads in 4 flips)?
choose(4,2)
#probability 2 heads in 4 flips when p=0.5?-概率函数
dbinom(2,4,0.5)
#probability 2 heads or fewer in 4 flips when p=0.5?
pbinom(2,4,0.5)
#pseudo-random draw of the number of head in 10 4 flips when p=0.75?
rbinom(1,10,0.75)
#Sample
#how do we calculate P(4 wins in 7 games)?
choose(7,4)
#probability 4 wins in 7 games
dbinom(4,7,0.5)
#how do we calculate P(2 heads in 4 flips)?
choose(4,2)
#probability 2 heads in 4 flips when p=0.5?-概率函数
dbinom(2,4,0.5)
#probability 2 heads or fewer in 4 flips when p=0.5?
pbinom(2,4,0.5)
pbinom(3,4,0.5)
#pseudo-random draw of the number of head in 10 4 flips when p=0.75?
rbinom(1,10,0.75)
#Sample
#how do we calculate P(4 wins in 7 games)?
choose(7,4)
#probability 4 wins in 7 games
dbinom(4,7,0.5)
#how do we calculate P(2 heads in 4 flips)?
choose(4,2)
#probability 2 heads in 4 flips when p=0.5?-概率函数
dbinom(2,4,0.5)
#probability 2 heads or fewer in 4 flips when p=0.5?
pbinom(2,4,0.5)
#pseudo-random draw of the number of head in 10 4 flips when p=0.75?
rbinom(1,10,0.75)
#Sample
#how do we calculate P(4 wins in 7 games)?
choose(7,4)
#probability 4 wins in 7 games
dbinom(4,7,0.5)
#probability 4 or fewer wins in 7 games
pbinom(4,7,0.5)
probability<-c(0.01, 0.05, 0.10, 0.25, 0.50)
probability
size <- NULL
for(i in 2:15) {
size[i-1] <- 2**i
}
size
data<-data.frame(size = rep(size, length(probability)), probability = rep(probability, length(size)), Abs_Error = rep(NA, length(probability) * length(size)),Rel_Error = rep(NA, length(probability) * length(size)))
for (i in 1:nrow(data)) {
size =data$size[i]
probability = data$probability[i]
Abs=mean(abs((rbinom(1e4, size, probability) / size)-probability))
Rel= mean(abs(((rbinom(1e4, size, probability) / size) - probability)/ probability))
data[i, "Abs_Error"] = Abs
data[i, "Rel_Error"] = Rel
}
set.seed(1)
data
require(ggplot2)
ggplot(data, aes(size, Abs_Error, color = factor(probability))) +
geom_point() +
geom_line(aes(group = probability)) +
scale_x_continuous(trans = "log2") +
ylab("Absolute Error")
require(ggplot2)
ggplot(data, aes(size, Rel_Error, color = factor(probability))) +
geom_point() +
geom_line(aes(group = probability)) +
scale_x_continuous(trans = "log2") +
ylab("Relative Error")
ggplot(data, aes(size, Abs_Error, color = factor(probability))) +
geom_point() +
geom_line(aes(group = probability)) +
scale_x_continuous(trans = "log2") +
ylab("Absolute Error") +
theme_bw()
require(ggplot2)
ggplot(data, aes(size, Rel_Error, color = factor(probability))) +
geom_point() +
geom_line(aes(group = probability)) +
scale_x_continuous(trans = "log2") +
ylab("Relative Error")+
theme_bw()
probability<-c(0.01, 0.05, 0.10, 0.25, 0.50)
probability
size <- NULL
for(i in 2:15) {
size[i-1] <- 2**i
}
size
data<-data.frame(size = rep(size, length(probability)), probability = rep(probability, length(size)), Abs_Error = rep(NA, length(probability) * length(size)),Rel_Error = rep(NA, length(probability) * length(size)))
for (i in 1:nrow(data)) {
size =data$size[i]
probability = data$probability[i]
Abs=mean(abs((rbinom(1e4, size, probability) / size)-probability))
Rel= mean(abs(((rbinom(1e4, size, probability) / size) - probability)/ probability))
data[i, "Abs_Error"] = Abs
data[i, "Rel_Error"] = Rel
}
set.seed(1)
data
require(ggplot2)
ggplot(data, aes(size, Abs_Error, color = factor(probability))) +
geom_point() +
geom_line(aes(group = probability)) +
scale_x_continuous(trans = "log2") +
ylab("Absolute Error") +
theme_bw()
require(ggplot2)
ggplot(data, aes(size, Rel_Error, color = factor(probability))) +
geom_point() +
geom_line(aes(group = probability)) +
scale_x_continuous(trans = "log2") +
ylab("Relative Error")+
theme_bw()
#how do we calculate P(2 heads in 4 flips)?
choose(4,2)
#probability 2 heads in 4 flips when p=0.5?-概率函数
dbinom(2,4,0.5)
#probability 2 heads or fewer in 4 flips when p=0.5?
pbinom(2,4,0.5)
sum(dbinom(0~2,4,0.5))
#how do we calculate P(2 heads in 4 flips)?
choose(4,2)
#probability 2 heads in 4 flips when p=0.5?-概率函数
dbinom(2,4,0.5)
#probability 2 heads or fewer in 4 flips when p=0.5?
pbinom(2,4,0.5)
sum(dbinom(0:2,4,0.5))
#pseudo-random draw of the number of head in 10 4 flips when p=0.75?
rbinom(1,10,0.75)
#Sample
#how do we calculate P(4 wins in 7 games)?
choose(7,4)
#probability 4 wins in 7 games
dbinom(4,7,0.5)
#probability 4 or fewer wins in 7 games
pbinom(4,7,0.5)
