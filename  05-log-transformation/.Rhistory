# check regular expression
regex
#subset words
str_subset(stringr::words,regex)
population <- read.csv("world_cities_population.csv")
# read documentation
?tidyr::separate
# separate using regular expression for comma and white space
population %>%
separate(Location, into = c("City","State"), sep = ",\\s")
population <- read.csv("world_cities_population.csv")
population
# read documentation
?tidyr::separate
# separate using regular expression for comma and white space
population %>%
separate(Location, into = c("City","State"), sep = ",")
# read documentation
?tidyr::separate
# separate using regular expression for comma and white space
population %>%
separate(Location, into = c("City","State"), sep = ".,")
ï¼Ÿseparate()
# read documentation
?tidyr::separate
# separate using regular expression for comma and white space
population %>%
separate(Location, into = c("City","State"), sep = ".,")
#gamma
gamma.shape <- 3
gamma.scale <- 1
range<-seq(0,20,0.1)
#mean
gamma.mean <- gamma.shape / gamma.scale
gamma.mean
#median
gamma.median <- qgamma(0.5, shape = gamma.shape, scale = gamma.scale)
gamma.median
#PDF
gamma_pdf<-dgamma(range, shape = gamma.shape, scale = gamma.scale)
#Gamma PDF Graph
plot(range,gamma_pdf,type="l",main="Gamma PDF",xlab="Gamma Range",ylab="Gamma Density")
abline(v = gamma.mean, col = "Yellow")
abline(v=gamma.median,col="Blue")
legend("topright",legend = c("Mean","Median"), col = c("Yellow","Blue"), lty=1)
#CDF
gamma_cdf<-pgamma(range, shape = gamma.shape, scale = gamma.scale)
#Gamma CDF Graph
plot(range,gamma_cdf,type="l",main="Gamma CDF",xlab="Gamma Range",ylab="Gamma probability")
abline(v = gamma.mean, col = "Yellow")
abline(v=gamma.median,col="Blue")
legend("topright",legend = c("Mean","Median"), col = c("Yellow","Blue"), lty=1)
#gamma Y = log(X) random variable
#log(x)
x<-rgamma(10000, shape = gamma.shape, scale = gamma.scale)
logx<-log(x)
#calculating the mean and median
log.gamma.mean <- log(gamma.shape/gamma.scale)
log.gamma.mean
log.gamma.median <- log(qgamma(0.5, gamma.shape, gamma.scale))
log.gamma.median
#Gamma Y=log(x) PDF Graph
hist(logx,main="Histogram of Gamma Y=log(x) PDF", xlab="Log(x)",ylab="Density")
abline(v = log.gamma.mean, col = "Yellow")
abline(v = log.gamma.median, col = "Blue")
legend("topright",legend = c("Mean","Median"), col = c("Yellow","Blue"), lty=1)
#creating the log gamma cdf
plot(ecdf(logx), main = "Gamma Y=log(x) CDF", xlab = "Log(x)" , ylab = "Probability")
abline(v = log.gamma.mean, col = "Yellow")
abline(v = log.gamma.median, col = "Blue")
legend("bottomright",legend = c("Mean","Median"), col = c("Yellow","Blue"), lty=1)
#gamma generate 1000 samples of size 100 geometric and arithmetic mean
#Arithmetic and geometric sample mean
Arithmetic.mean = NA
Geometric.mean = NA
for (i in 1:1000){
sample <- rgamma(100, shape = gamma.shape, scale = gamma.scale)
Arithmetic.mean[i] <- mean(sample)
Geometric.mean[i] <- exp(mean(log(sample)))
}
#Generate a scatter plot of the geometric and arithmetic sample means. Add the line of identify as a reference line.
plot(Arithmetic.mean,Geometric.mean, main = "Relationship Between the Arithmetic and the Geometric Mean",xlab = "Arithmetic Mean", ylab = "Geometric Mean")
abline(a=0,b=1)
legend("bottomright", legend = c("Line of Identity"),lty = 1)
#difference between the arithmetic mean and the geometric mean
difference<-Arithmetic.mean-Geometric.mean
#Generate a histogram of the difference between the arithmetic mean and the geometric mean.
hist(difference, main = "Difference between the arithmetic mean and the geometric mean",xlab = "Difference between the arithmetic mean and the geometric mean")
#Log normal
meanlog<--1
sdlog<- 1
#range
lnorm.range<-seq(0,10,0.01)
#mean
lnorm.mean <- exp(meanlog + (sdlog ^ 2) / 2)
lnorm.mean
#median
lnorm.median <- qlnorm(0.5, meanlog, sdlog)
lnorm.median
#PDF Log normal
lnorm_pdf<-dlnorm(lnorm.range, meanlog, sdlog)
#log normal pdf Graph
plot(lnorm.range,lnorm_pdf,type="l",main="log normal PDF",xlab="log norm Range",ylab="log norm Density")
abline(v=lnorm.mean, col = "Yellow")
abline(v=lnorm.median,col="Blue")
legend("topright",legend = c("Mean","Median"), col = c("Yellow","Blue"), lty=1)
#CDF Log normal
lnorm_cdf<-plnorm(lnorm.range, meanlog, sdlog)
#log normal cdf Graph
plot(lnorm.range,lnorm_cdf,type="l",main="log normal CDF",xlab="log norm Range",ylab="log norm Probability")
abline(v=lnorm.mean, col = "Yellow")
abline(v=lnorm.median,col="Blue")
legend("bottomright",legend = c("Mean","Median"), col = c("Yellow","Blue"), lty=1)
#Log normal-Y = log(X)
ln<-rlnorm(10000,meanlog,sdlog)
logln<-log(ln)
#Log mean
log.lnorm.mean <-log(lnorm.mean)
log.lnorm.mean
#Log median
log.lnorm.median <- log(lnorm.median)
log.lnorm.median
#generate a figure of the PDF of the transformation Y = log(X) random variable.
hist(logln, main = "PDF of the transformation Y = log(X) random variable", xlab = "X Range of Values", ylab = "Density")
abline(v=lnorm.mean, col = "Yellow")
abline(v=lnorm.median,col="Blue")
legend("topright",legend = c("Mean", "Median"), col = c("Yellow","Blue"), lty=1)
#generate a figure of the CDF of the transformation Y = log(X) random variable.
plot(ecdf(logln), main = "CDF of the transformation Y = log(X) random variable", xlab = "Log(x)")
abline(v = log.lnorm.mean, col = "Yellow")
abline(v = log.lnorm.median, col = "Blue")
legend("bottomright",legend = c("Log Mean","Log Median"), col = c("Yellow","Blue"), lty=1)
#Log normal-generate 1000 samples of size 100. For each sample, calculate the geometric and arithmetic mean
#Arithmetic and geometric sample mean
ln.Arithmetic.mean = NA
ln.Geometric.mean = NA
for (i in 1:1000){
ln.sample <- rlnorm(100, meanlog,sdlog)
ln.Arithmetic.mean[i] <- mean(ln.sample)
ln.Geometric.mean[i] <- exp(mean(log(ln.sample)))
}
#Generate a scatter plot of the geometric and arithmetic sample means. Add the line of identify as a reference line.
plot(ln.Arithmetic.mean,ln.Geometric.mean, main = "Relationship Between the Arithmetic and the Geometric Mean",xlab = "Arithmetic Mean", ylab = "Geometric Mean")
abline(a=0,b=1)
legend("bottomright", legend = c("Line of Identity"),lty = 1)
#difference between the arithmetic mean and the geometric mean
ln.difference<-ln.Arithmetic.mean-ln.Geometric.mean
#Generate a histogram of the difference between the arithmetic mean and the geometric mean.
hist(ln.difference, main = "histogram of the difference between the arithmetic mean and the geometric mean",xlab = "difference between the log norm arithmetic mean and the log norm geometric mean")
#Uniform distribution
min<-0
max<-12
uni.range<-seq(-1,13,0.01)
#Mean
unif.mean<-(min+max)/2
unif.mean
#median
unif.median<-qunif(0.5, min, max)
unif.median
#PDF uniform normal distribution
unif_pdf<-dunif(uni.range, min, max)
#Uniform pdf Graph
plot(uni.range,unif_pdf,type="l",main="Uniform PDF",xlab="Uniform Range",ylab="Uniform Density")
abline(v=unif.mean, col = "Yellow")
abline(v=unif.median,col="Blue")
legend("topright",legend = c("Uniform Mean","Uniform median"), col = c("Yellow","Blue"), lty=1)
#CDF uniform normal distribution
unif_cdf<-punif(uni.range, min, max)
#Uniform pdf Graph
plot(uni.range,unif_cdf,type="l",main="Uniform CDF",xlab="Uniform Range", ylab="Uniform probability")
abline(v=unif.mean, col = "Yellow")
abline(v=unif.median,col="Blue")
legend("bottomright",legend = c("Uniform Mean","Uniform median"), col = c("Yellow","Blue"), lty=1)
#Uniform distribution-Y = log(X) random variable
unif<-runif(10000,min,max)
logunif<-log(unif)
#mean
log.unif.mean<-log(unif.mean)
log.unif.mean
#median
log.unif.median<-log(unif.median)
log.unif.median
#generate a figure of the PDF of the transformation Y = log(X) random variable.
hist(logunif,main = "PDF of the Uniform Distribution", xlab = "log(x) Range", ylab = "Density")
abline(v = log.unif.mean, col = "Yellow")
abline(v = log.unif.median, col = "Blue")
legend("topleft",legend = c("Log uniform Median", "Log uniformMean"), col = c("Yellow","Blue"), lty=1)
#generate a figure of the CDF of the transformation Y = log(X) random variable under uniform distribution.
plot(ecdf(logunif), main = "CDF of the transformation Y = log(X) random variable under uniform distribution", xlab = "range",ylab="Probability")
abline(v = log.unif.mean, col = "Yellow")
abline(v = log.unif.median, col = "Blue")
legend("topleft",legend = c("Log uniform Median", "Log uniformMean"), col = c("Yellow","Blue"), lty=1)
#Uniform -generate 1000 samples of size 100. For each sample, calculate the geometric and arithmetic mean
#Arithmetic and geometric sample mean
unif.Arithmetic.mean = NA
unif.Geometric.mean = NA
for (i in 1:1000){
unif.sample <- runif(100, min,max)
unif.Arithmetic.mean[i] <- mean(unif.sample )
unif.Geometric.mean[i] <- exp(mean(log(unif.sample)))
}
#Generate a scatter plot of the geometric and arithmetic sample means. Add the line of identify as a reference line.
plot(unif.Arithmetic.mean,unif.Geometric.mean, main = "Relationship Between the Arithmetic and the Geometric Mean",xlab = "Uniform Arithmetic Mean", ylab = "Uniform Geometric Mean")
abline(a=0,b=1)
legend("bottomright", legend = c("Line of Identity"),lty = 1)
#difference between the arithmetic mean and the geometric mean
unif.difference<-unif.Arithmetic.mean-unif.Geometric.mean
#Generate a histogram of the difference between the arithmetic mean and the geometric mean.
hist(unif.difference, main = "histogram of the difference between the arithmetic mean and the geometric mean",xlab = "difference between the uniform arithmetic mean and uniform geometric mean")
arithmetic_mean <- NA
geometric_mean <- NA
for(i in 1:10000) {
sample = rgamma(100,3,1)
arithmetic_mean[i] = mean(sample)
geometric_mean[i] = exp(mean(log(sample)))
}
plot(arithmetic_mean, geometric_mean, main = 'Relationship Between the Arithmetic and the Geometric Mean - Gamma')
hist(arithmetic_mean, main= "Difference between the arithmetic mean and the geometric mean")
for(i in 1:10000) {
sample = rlnorm(100,-1,1)
arithmetic_mean[i] = mean(sample)
geometric_mean[i] = exp(mean(log(sample)))
}
plot(arithmetic_mean, geometric_mean, main = "Scatterplot of Arithmetic vs Geometric Means - log norm")
hist(arithmetic_mean-geometric_mean, main= "Difference between the arithmetic mean and the geometric mean")
for(i in 1:10000) {
sample = runif(100, min = 0, max = 12)
arithmetic_mean[i] = mean(sample)
geometric_mean[i] = exp(mean(log(sample)))
}
plot(arithmetic_mean, geometric_mean, main = "Scatterplot of Arithmetic vs Geometric Means - uniform Situation")
hist(arithmetic_mean, main= "Difference between the arithmetic mean and the geometric mean")
e_log <- NA
log_e <- NA
for(i in 1:10000) {
data = rgamma(1000, 3,1)
e_log[i] = mean(log(data))
log_e [i] = log(mean(data))
}
plot(e_log, log_e, main = "elationship between E[log(X)] vs log(E[X]) - Gamma")
hist(e_log-log_e,main = "Difference Between E[log(x)] and log(E[x])",xlab="Difference")
for(i in 1:10000) {
data = rlnorm(1000, -1,1)
e_log[i] = mean(log(data))
log_e [i] = log(mean(data))
}
plot(e_log, log_e, main = "elationship between E[log(X)] vs log(E[X]) - Gamma")
abline(0,1)
hist(e_log-log_e,main = "Difference Between E[log(x)] and log(E[x])",xlab="Difference")
for(i in 1:10000) {
data = runif(1000, 0, 12)
e_log[i] = mean(log(data))
log_e [i] = log(mean(data))
}
plot(e_log, log_e, main = "elationship between E[log(X)] vs log(E[X]) - Gamma")
hist(e_log-log_e,main = "Difference Between E[log(x)] and log(E[x])",xlab="Difference")
#Index
gamma.shape<-3
gamma.scale<-12
range<-seq(0,40,1)
for(i in 1:100) {
data = rgamma(100, gamma.shape,gamma.scale) %>%quantile(.25)
}
library(tidyverse)
#Index
gamma.shape<-3
gamma.scale<-12
range<-seq(0,40,1)
for(i in 1:100) {
data = rgamma(100, gamma.shape,gamma.scale) %>%quantile(.25)
}
hist(data)
#Index
gamma.shape<-3
gamma.scale<-12
range<-seq(0,40,1)
#mean
gamma.mean <- gamma.shape / gamma.scale
gamma.mean
#median
gamma.25th<-qgamma(0.25, shape = gamma.shape, scale = gamma.scale)
gamma.25th
#PDF
gamma_pdf<-dgamma(range, shape = gamma.shape, scale = gamma.scale)
#Gamma PDF Graph
plot(range,gamma_pdf,type="l",main="Gamma PDF",xlab="Gamma Range",ylab="Gamma Density")
abline(v = gamma.mean, col = "Yellow")
abline(v=gamma.25th,col="Blue")
legend("topright",legend = c("Mean","25 percentile"), col = c("Yellow","Blue"), lty=1)
#Index
gamma.shape<-3
gamma.scale<-12
range<-seq(0,40,1)
for(i in 1:10000) {
data = rgamma(100, gamma.shape,gamma.scale) %>%quantile(.25)
}
hist(data)
? quantile
q_bmi<- rep(NA, 5000)
for (i in seq_along(q_bmi)){
q_bmi[i]<- rnorm(200,25,6.5)%>%quantiole(0.33)
}
q_bmi<- rep(NA, 5000)
for (i in seq_along(q_bmi)){
q_bmi[i]<- rnorm(200,25,6.5)%>%quantile(0.33)
}
q_bmi<- rep(NA, 5000)
for (i in seq_along(q_bmi)){
q_bmi[i]<- rnorm(200,25,6.5)%>%quantile(0.33)
}
q_bmi
q_bmi<- rep(NA, 5000)
for (i in seq_along(q_bmi)){
q_bmi[i]<- rnorm(200,25,6.5)#%>%quantile(0.33)
}
q_bmi
q_bmi<- rep(NA, 5000)
for (i in seq_along(q_bmi)){
q_bmi[i]<- rnorm(200,25,6.5)%>%quantile(0.33)
}
q_bmi
ecedstar<-function(t,data, smooth){
outer(t,date, function(a,b){dnorm(a,b,smooth)})%>%rowMeans
}
plot(ecdaf(nmi[1:50]),main="")
ecedstar<-function(t,data, smooth){
outer(t,date, function(a,b){dnorm(a,b,smooth)})%>%rowMeans
}
plot(ecdf(nmi[1:50]),main="")
ecedstar<-function(t,data, smooth){
outer(t,date, function(a,b){dnorm(a,b,smooth)})%>%rowMeans
}
plot(ecdf(rnorm[1:50]),main="")
ecedstar<-function(t,data, smooth){
outer(t,date, function(a,b){dnorm(a,b,smooth)})%>%rowMeans
}
plot(ecdf(bmi[1:50]),main="")
## KDE
density(
x, #the data
bw="nrd0", # the degreee of smotthing or a rule
adjust=1, # the degree of smoothing relative to default
kernel=c("gaussian","epanechnikov","rectangular","triangular","biweight"), #The type of kernel
...
)
## KDE
density(
x, #the data
bw="nrd0", # the degreee of smotthing or a rule
adjust=1, # the degree of smoothing relative to default
kernel=c("gaussian","epanechnikov","rectangular","triangular","biweight"), #The type of kernel,
...
)
## KDE
density(
x, #the data
bw="nrd0", # the degreee of smotthing or a rule
adjust=1, # the degree of smoothing relative to default
kernel=c("gaussian","epanechnikov","rectangular","triangular","biweight"), #The type of kernel,
)
## KDE
KDE<-function(x,bw,adjust,kernel){density(
x, #the data
bw="nrd0", # the degreee of smotthing or a rule
adjust=1, # the degree of smoothing relative to default
kernel=c("gaussian","epanechnikov","rectangular","triangular","biweight"), #The type of kernel,
)
}
Hmisc::getHdata(nhgh)
Hmisc::getHdata(nhgh)
nhgh
Hmisc::getHdata(nhgh)
bmi<-nhgh$bmi
q<-KDE(bmi,1)
ecedstar<-function(t,data, smooth){
outer(t,date, function(a,b){dnorm(a,b,smooth)})%>%rowMeans
}
plot(ecdf(bmi[1:50]),main="")
curve(ecdfstar(x,bim[1:50], somooth=10),add =T, lwd=3. col="rorange")
ecedstar<-function(t,data, smooth){
outer(t,date, function(a,b){dnorm(a,b,smooth)})%>%rowMeans
}
plot(ecdf(bmi,main="")
curve(ecdfstar(x,bim[1:50], somooth=10),add =T, lwd=3. col="rorange")
ecedstar<-function(t,data, smooth){
outer(t,date, function(a,b){dnorm(a,b,smooth)})%>%rowMeans
}
plot(ecdf(bmi,main=""))
ecedstar<-function(t,data, smooth){
outer(t,date, function(a,b){dnorm(a,b,smooth)})%>%rowMeans
}
hist(ecdf(bmi,main=""))
ecedstar<-function(t,data, smooth){
outer(t,date, function(a,b){dnorm(a,b,smooth)})%>%rowMeans
}
hist(ecdf(bmi,main="",break=100))
ecedstar<-function(t,data, smooth){
outer(t,date, function(a,b){dnorm(a,b,smooth)})%>%rowMeans
}
hist(ecdf(bmi,main="",breaks=100))
ecedstar<-function(t,data, smooth){
outer(t,date, function(a,b){dnorm(a,b,smooth)})%>%rowMeans
}
hist(ecdf(bmi),main="", breaks=100))
ecedstar<-function(t,data, smooth){
outer(t,date, function(a,b){dnorm(a,b,smooth)})%>%rowMeans
}
hist(ecdf(bmi),main="", breaks=100)
ecedstar<-function(t,data, smooth){
outer(t,date, function(a,b){dnorm(a,b,smooth)})%>%rowMeans
}
plot(ecdf(bmi),main="", breaks=100)
curve(ecdfstar(x,bim[1:50], somooth=10),add =T, lwd=3. col="rorange")
ecedstar<-function(t,data, smooth){
outer(t,date, function(a,b){dnorm(a,b,smooth)})%>%rowMeans
}
plot(ecdf(bmi),main="", breaks=100)
curve(ecdfstar(x,bim, somooth=10),add =T, lwd=3. col="rorange")
ecedstar<-function(t,data, smooth){
outer(t,date, function(a,b){dnorm(a,b,smooth)})%>%rowMeans
}
plot(ecdf(bmi),main="", breaks=100)
curve(ecdfstar(x,bim, somooth=10),add =T, lwd=3. col="orange")
ecedstar<-function(t,data, smooth){
outer(t,date, function(a,b){dnorm(a,b,smooth)})%>%rowMeans
}
plot(ecdf(bmi),main="", breaks=100)
curve(ecdfstar(x,bim, somooth=10),add =T, lwd=3,col="orange")
ecedstar<-function(t,data, smooth){
outer(t,data, function(a,b){dnorm(a,b,smooth)})%>%rowMeans
}
plot(ecdf(bmi),main="", breaks=100)
curve(ecdfstar(x,bim, somooth=10),add =T, lwd=3,col="orange")
ecdfstar<-function(t,data, smooth){
outer(t,data, function(a,b){dnorm(a,b,smooth)})%>%rowMeans
}
plot(ecdf(bmi),main="", breaks=100)
curve(ecdfstar(x,bim, somooth=10),add =T, lwd=3,col="orange")
ecdfstar<-function(t,data, smooth){
outer(t,data, function(a,b){dnorm(a,b,smooth)})%>%rowMeans
}
plot(ecdf(bmi),main="", breaks=100)
curve(ecdfstar(x,bim, somooth=1),add =T, lwd=3,col="orange")
ecdfstar<-function(t,data, smooth){
outer(t,data, function(a,b){dnorm(a,b,smooth)})%>%rowMeans
}
plot(ecdf(bmi),main="", breaks=100)
curve(ecdfstar(x,bmi, 1),add =T, lwd=3,col="orange")
library(tidyverse)
ecdfstar<-function(t,data, smooth){
outer(t,data, function(a,b){dnorm(a,b,smooth)})%>%rowMeans
}
plot(ecdf(bmi),main="", breaks=100)
curve(ecdfstar(x,bmi, 1),add =T, lwd=3,col="orange")
ecdfstar<-function(t,data, smooth){
outer(t,data, function(a,b){pnorm(a,b,smooth)})%>%rowMeans
}
plot(ecdf(bmi),main="", breaks=100)
curve(ecdfstar(x,bmi, 1),add =T, lwd=3,col="orange")
#CDF
ecdfstar<-function(t,data, smooth){
outer(t,data, function(a,b){pnorm(a,b,smooth)})%>%rowMeans
}
plot(ecdf(bmi),main="", breaks=100)
curve(ecdfstar(x,bmi, 1),add =T, lwd=3,col="orange")
#CDF
ecdfstar<-function(t,data, smooth){
outer(t,data, function(a,b){pnorm(a,b,smooth)})%>%rowMeans
}
plot(ecdf(bmi),main="", breaks=100)
curve(ecdfstar(x,bmi, 1),add =T, lwd=3,col="orange")
curve(ecdfstar(x,bmi, 0.5),add =T, lwd=3,col="blue")
#CDF
ecdfstar<-function(t,data, smooth){
outer(t,data, function(a,b){pnorm(a,b,smooth)})%>%rowMeans
}
plot(ecdf(bmi),main="")
curve(ecdfstar(x,bmi, 1),add =T, lwd=3,col="orange")
curve(ecdfstar(x,bmi, 0.5),add =T, lwd=3,col="blue")
#CDF
ecdfstar<-function(t,data, smooth){
outer(t,data, function(a,b){pnorm(a,b,smooth)})%>%rowMeans
}
plot(ecdf(bmi),main="", breaks=1)
curve(ecdfstar(x,bmi, 1),add =T, lwd=3,col="orange")
curve(ecdfstar(x,bmi, 0.5),add =T, lwd=3,col="blue")
#CDF
ecdfstar<-function(t,data, smooth){
outer(t,data, function(a,b){pnorm(a,b,smooth)})%>%rowMeans
}
plot(ecdf(bmi),main="")
curve(ecdfstar(x,bmi, 1),add =T, lwd=3,col="orange")
curve(ecdfstar(x,bmi, 0.5),add =T, lwd=3,col="blue")
#CDF
ecdfstar<-function(t,data, smooth){
outer(t,data, function(a,b){pnorm(a,b,smooth)})%>%rowMeans
}
plot(ecdf(bmi),main="")
curve(ecdfstar(x,bmi, 1),add =T, lwd=3,col="orange")
curve(ecdfstar(x,bmi, 10),add =T, lwd=3,col="blue")
density(
bmi, #the data
#bw="nrd0", # the degree of smotthing or a rule
adjust=1, # the degree of smoothing relative to default
kernel="gaussian", #The type of kernel,
)
plot(density(
bmi, #the data
#bw="nrd0", # the degree of smotthing or a rule
adjust=1, # the degree of smoothing relative to default
kernel="gaussian", #The type of kernel,
))
