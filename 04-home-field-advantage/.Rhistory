p.home.adv.win[x] <- as.numeric(apo[, sum(x), overall_outcome][1,2])
# Calculate the difference
difference[x] <- p.win [x] - p.home.adv.win[x]
}
data<-data.frame(field.advantage,p.home.adv.win,p.win,difference)
data
ggplot(data, aes(x=field.advantage,y=difference))+geom_point()+
theme_bw()+
geom_smooth()+
labs(
title="relationship between probabilities (with vs without home field advantage) and the advantage factor",
x="Field Advantage Rate",
y="Probability difference"
)
library(tidyverse)
library(data.table)
library(ggplot2)
# Load the file
apo <- fread("https://raw.githubusercontent.com/thomasgstewart/data-science-5620-fall-2021/master/deliverables/assets/all-possible-world-series-outcomes.csv")
# Home field indicator
hfi <- c(0,0,1,1,1,0,0) #{NYC, NYC, ATL, ATL, ATL, NYC, NYC}.
# P_B
pb <- 0.55
advantage_multiplier <- 1.1 # Set = 1 for no advantage
pbh <- pb * advantage_multiplier
pba <- 1 - (1 - pb) * advantage_multiplier
# the probability of each possible outcome
apo[, p := NA_real_] # Initialize new column in apo to store prob
for(i in 1:nrow(apo)){
prob_game <- rep(1, 7)
for(j in 1:7){
p_win <- ifelse(hfi[j], pbh, pba)
prob_game[j] <- case_when(
apo[i,j,with=FALSE] == "W" ~ p_win
, apo[i,j,with=FALSE] == "L" ~ 1 - p_win
, TRUE ~ 1
)
}
apo[i, p := prod(prob_game)] # Data.table syntax
}
# Probability of overall World Series outcomes without home advantage
p.win<-pnbinom(3, 4, 0.55)
p.win
# Probability of overall World Series outcomes with home advantage
p.home.adv.win <- as.numeric(apo[, sum(p), overall_outcome][1,2])
p.home.adv.win
difference <-p.win-p.home.adv.win
difference
set.seed(1)
test.size=10000
simulation.game <- rep(NA, test.size)
for (i in seq_along(simulation.game)){
prob_game <- rep(NA,7)
for(j in 1:7){
prob_game[j] <- rbinom(1,1,0.55)
}
simulation.game[i] <- ifelse(sum(prob_game)>3, 1, 0)
}
simulation.game <- sum(simulation.game)/test.size
simulation.game
set.seed(1)
simulation.game.adv<- rep(NA, test.size)
for (i in seq(simulation.game.adv)){
prob_game <- rep(NA,7)
for(j in 1:7){
prob_game[j] <- rbinom(1,1,ifelse(hfi[j], pbh, pba))
}
simulation.game.adv[i] <- ifelse(sum(prob_game)>3, 1, 0)
}
simulation.game.adv <- sum(simulation.game.adv)/test.size
simulation.game.adv
simulation.game-simulation.game.adv
abs_error_simulation.game.adv <-abs(simulation.game-p.win)
abs_error_simulation.game.adv
abs_error_simulation.game.adv <- abs(simulation.game.adv - p.home.adv.win)
abs_error_simulation.game.adv
rel_error_simulation.game.adv <-abs(simulation.game-p.win )/simulation.game
rel_error_simulation.game.adv
rel_error_simulation.game.adv <- abs(simulation.game.adv - p.home.adv.win)/simulation.game.adv
rel_error_simulation.game.adv
#Setup the probability
pb<- seq(0.1,0.9,0.01)
pb
#probability of no home advantage win
p.win<-rep(NA,length(pb))
#probability of home advantage win
p.home.adv.win <- rep(NA,length(pb))
#difference between two situationtg
difference <- rep(NA,length(pb))
for (x in seq(pb)) {
advantage_multiplier <- 1.1
pbh <- pb[x] * advantage_multiplier
pba <- 1 - (1 - pb[x]) * advantage_multiplier
# Calculate the probability of winning without home advantage
p.win [x] <- pnbinom(3, 4, pb[x])
# Calculate the probability of winning with home advantage
apo[, x := NA_real_] # Initialize new column in apo to store prob
for(i in 1:nrow(apo)){
prob_game <- rep(1, 7)
for(j in 1:7){
p_win <- ifelse(hfi[j], pbh, pba)
prob_game[j] <- case_when(
apo[i,j,with=FALSE] == "W" ~ p_win
, apo[i,j,with=FALSE] == "L" ~ 1 - p_win
, TRUE ~ 1
)
}
apo[i, x := prod(prob_game)] # Data.table syntax
}
p.home.adv.win[x] <- as.numeric(apo[, sum(x), overall_outcome][1,2])
# Calculate the difference
difference[x] <- p.win [x] - p.home.adv.win[x]
}
data<-data.frame(pb,p.home.adv.win,p.win,difference)
data
ggplot(data, aes(x=pb,y=difference))+geom_point()+
theme_bw()+
geom_smooth()+
labs(
title="relationship between probabilities (with vs without home field advantage) and Pb",
x="Pb rate",
y="Probability difference"
)
field.advantage <- seq(1,1.8,0.01)
p.home.adv.win<- rep(NA,length(pb))
p.win  <- rep(NA,length(pb))
difference<- rep(NA,length(pb))
# Calculate the probability of winning without home advantage
for (x in seq(field.advantage)) {
advantage_multiplier <- field.advantage[x]
pbh <- 0.55 * advantage_multiplier
pba <- 1 - (1 - 0.55) * advantage_multiplier
p.win [x] <- pnbinom(3, 4, 0.55)
# Calculate the probability of each possible outcome
apo[, x := NA_real_] # Initialize new column in apo to store prob
for(i in 1:nrow(apo)){
prob_game <- rep(1, 7)
for(j in 1:7){
p_win <- ifelse(hfi[j], pbh, pba)
prob_game[j] <- case_when(
apo[i,j,with=FALSE] == "W" ~ p_win
, apo[i,j,with=FALSE] == "L" ~ 1 - p_win
, TRUE ~ 1
)
}
apo[i, x := prod(prob_game)] # Data.table syntax
}
p.home.adv.win[x] <- as.numeric(apo[, sum(x), overall_outcome][1,2])
# Calculate the difference
difference[x] <- p.win [x] - p.home.adv.win[x]
}
data<-data.frame(field.advantage,p.home.adv.win,p.win,difference)
data
ggplot(data, aes(x=field.advantage,y=difference))+geom_point()+
theme_bw()+
geom_smooth()+
labs(
title="relationship between probabilities (with vs without home field advantage) and the advantage factor",
x="Field Advantage Rate",
y="Probability difference"
)
library(tidyverse)
library(data.table)
library(ggplot2)
# Load the file
apo <- fread("https://raw.githubusercontent.com/thomasgstewart/data-science-5620-fall-2021/master/deliverables/assets/all-possible-world-series-outcomes.csv")
# Home field indicator
hfi <- c(0,0,1,1,1,0,0) #{NYC, NYC, ATL, ATL, ATL, NYC, NYC}.
# P_B
pb <- 0.55
advantage_multiplier <- 1.1 # Set = 1 for no advantage
pbh <- pb * advantage_multiplier
pba <- 1 - (1 - pb) * advantage_multiplier
# the probability of each possible outcome
apo[, p := NA_real_] # Initialize new column in apo to store prob
for(i in 1:nrow(apo)){
prob_game <- rep(1, 7)
for(j in 1:7){
p_win <- ifelse(hfi[j], pbh, pba)
prob_game[j] <- case_when(
apo[i,j,with=FALSE] == "W" ~ p_win
, apo[i,j,with=FALSE] == "L" ~ 1 - p_win
, TRUE ~ 1
)
}
apo[i, p := prod(prob_game)] # Data.table syntax
}
# Probability of overall World Series outcomes without home advantage
p.win<-pnbinom(3, 4, 0.55)
p.win
# Probability of overall World Series outcomes with home advantage
p.home.adv.win <- as.numeric(apo[, sum(p), overall_outcome][1,2])
p.home.adv.win
difference <-p.win-p.home.adv.win
difference
set.seed(1)
test.size=10000
simulation.game <- rep(NA, test.size)
for (i in seq_along(simulation.game)){
prob_game <- rep(NA,7)
for(j in 1:7){
prob_game[j] <- rbinom(1,1,0.55)
}
simulation.game[i] <- ifelse(sum(prob_game)>3, 1, 0)
}
simulation.game <- sum(simulation.game)/test.size
simulation.game
set.seed(1)
simulation.game.adv<- rep(NA, test.size)
for (i in seq(simulation.game.adv)){
prob_game <- rep(NA,7)
for(j in 1:7){
prob_game[j] <- rbinom(1,1,ifelse(hfi[j], pbh, pba))
}
simulation.game.adv[i] <- ifelse(sum(prob_game)>3, 1, 0)
}
simulation.game.adv <- sum(simulation.game.adv)/test.size
simulation.game.adv
simulation.game-simulation.game.adv
abs_error_simulation.game.adv <-abs(simulation.game-p.win)
abs_error_simulation.game.adv
abs_error_simulation.game.adv <- abs(simulation.game.adv - p.home.adv.win)
abs_error_simulation.game.adv
rel_error_simulation.game.adv <-abs(simulation.game-p.win )/simulation.game
rel_error_simulation.game.adv
rel_error_simulation.game.adv <- abs(simulation.game.adv - p.home.adv.win)/simulation.game.adv
rel_error_simulation.game.adv
#Setup the probability
pb<- seq(0.1,0.9,0.01)
pb
#probability of no home advantage win
p.win<-rep(NA,length(pb))
#probability of home advantage win
p.home.adv.win <- rep(NA,length(pb))
#difference between two situationtg
difference <- rep(NA,length(pb))
for (x in seq(pb)) {
advantage_multiplier <- 1.1
pbh <- pb[x] * advantage_multiplier
pba <- 1 - (1 - pb[x]) * advantage_multiplier
# Calculate the probability of winning without home advantage
p.win [x] <- pnbinom(3, 4, pb[x])
# Calculate the probability of winning with home advantage
apo[, x := NA_real_] # Initialize new column in apo to store prob
for(i in 1:nrow(apo)){
prob_game <- rep(1, 7)
for(j in 1:7){
p_win <- ifelse(hfi[j], pbh, pba)
prob_game[j] <- case_when(
apo[i,j,with=FALSE] == "W" ~ p_win
, apo[i,j,with=FALSE] == "L" ~ 1 - p_win
, TRUE ~ 1
)
}
apo[i, x := prod(prob_game)] # Data.table syntax
}
p.home.adv.win[x] <- as.numeric(apo[, sum(x), overall_outcome][1,2])
# Calculate the difference
difference[x] <- p.win [x] - p.home.adv.win[x]
}
data<-data.frame(pb,p.home.adv.win,p.win,difference)
data
ggplot(data, aes(x=pb,y=difference))+geom_point()+
theme_bw()+
geom_smooth()+
labs(
title="relationship between probabilities (with vs without home field advantage) and Pb",
x="Pb rate",
y="Probability difference"
)
field.advantage <- seq(1,1.8,0.01)
p.home.adv.win<- rep(NA,length(field.advantage))
p.win  <- rep(NA,length(field.advantage))
difference<- rep(NA,length(field.advantage))
for (x in seq(field.advantage)) {
advantage_multiplier <- field.advantage[x]
pbh <- 0.55 * advantage_multiplier
pba <- 1 - (1 - 0.55) * advantage_multiplier
# Calculate the probability of winning without home advantage
p.win [x] <- pnbinom(3, 4, 0.55)
# Calculate the probability of each possible outcome
apo[, x := NA_real_] # Initialize new column in apo to store prob
for(i in 1:nrow(apo)){
prob_game <- rep(1, 7)
for(j in 1:7){
p_win <- ifelse(hfi[j], pbh, pba)
prob_game[j] <- case_when(
apo[i,j,with=FALSE] == "W" ~ p_win
, apo[i,j,with=FALSE] == "L" ~ 1 - p_win
, TRUE ~ 1
)
}
apo[i, x := prod(prob_game)] # Data.table syntax
}
p.home.adv.win[x] <- as.numeric(apo[, sum(x), overall_outcome][1,2])
# Calculate the difference
difference[x] <- p.win [x] - p.home.adv.win[x]
}
data<-data.frame(field.advantage,p.home.adv.win,p.win,difference)
data
ggplot(data, aes(x=field.advantage,y=difference))+geom_point()+
theme_bw()+
geom_smooth()+
labs(
title="relationship between probabilities (with vs without home field advantage) and the advantage factor",
x="Field Advantage Rate",
y="Probability difference"
)
knitr::opts_chunk$set(echo = TRUE)
Pb<- 0.55
Py<- 1-Pb
Brave_Win_Prob<-
dnbinom(0,4,Pb)+
dnbinom(1,4,Pb)+
dnbinom(2,4,Pb)+
dnbinom(3,4,Pb)
Brave_Win_Prob
Pbseries <- seq(0.5,1, 0.01)
B_win_Prob <- rep(NA,length(Pbseries))
for(i in 1:length(Pbseries)){
B_win_Prob[i]<-
dnbinom(0,4,Pbseries[i])+
dnbinom(1,4,Pbseries[i])+
dnbinom(2,4,Pbseries[i])+
dnbinom(3,4,Pbseries[i])
}
Pbseries
B_win_Prob
data<-data.frame(Pbseries,B_win_Prob)
data
require(ggplot2)
graph_question2<-ggplot(data,aes(x=Pbseries,y=B_win_Prob))+geom_point()
graph_question2+labs(
titles="Probability of winning the World Series",
x="Probability of the Braves winning a head to head matchup",
y="P(Braves) win World Series")+
theme_bw()+
theme(plot.title=element_text(hjust=0.5))
series_length <- seq(1, 9999999, 2)
for(i in 1:length(series_length)){
Pb_win<-pnbinom(ceiling(series_length[i]/2)-1,ceiling(series_length[i]/2),0.55)
if(Pb_win>=0.8){
shortest<-series_length[i]
p_shortest<-Pb_win
break
}
}
shortest
p_shortest
Pbseries <- seq(0.5,1, 0.01)
Shortest_Record<- rep(NA,length(Pbseries))
for(i in 1:length(Pbseries)){
for(j in 1:length(series_length)){
Pb_win<-pnbinom(ceiling(series_length[j]/2)-1,ceiling(series_length[j]/2),Pbseries[i])
if(Pb_win>=0.8){
shortest<-series_length[j]
break}
}
Shortest_Record[i]<-shortest
}
Pbseries
Shortest_Record
data2<-data.frame(Pbseries,Shortest_Record)
data2
graph_question4<-ggplot(data2,aes(x=Pbseries,y=Shortest_Record))+geom_point()
graph_question4+labs(
titles="Shortest series so that P(Win WS given p)>=0.8",
x="Probability of the Braves winning a head to head matchup",
y="Series length")+
theme_bw()+
theme(plot.title=element_text(hjust=0.5))
prob_Braves_win_in_games<-(dnbinom(3,4,0.45)+dnbinom(3,4,0.55))/2
prob_Braves_win_in_games_Pb<-dnbinom(3,4,0.55)
prob_Braves_win_in_games
prob_Braves_win_in_games_Pb
prob_Braves_win_in_games_Pb*0.5/prob_Braves_win_in_games
knitr::opts_chunk$set(echo = TRUE)
Pb<- 0.55
Py<- 1-Pb
Brave_Win_Prob<-
dnbinom(0,4,Pb)+
dnbinom(1,4,Pb)+
dnbinom(2,4,Pb)+
dnbinom(3,4,Pb)
Brave_Win_Prob
Pbseries <- seq(0.5,1, 0.01)
B_win_Prob <- rep(NA,length(Pbseries))
for(i in 1:length(Pbseries)){
B_win_Prob[i]<-
dnbinom(0,4,Pbseries[i])+
dnbinom(1,4,Pbseries[i])+
dnbinom(2,4,Pbseries[i])+
dnbinom(3,4,Pbseries[i])
}
Pbseries
B_win_Prob
data<-data.frame(Pbseries,B_win_Prob)
data
require(ggplot2)
graph_question2<-ggplot(data,aes(x=Pbseries,y=B_win_Prob))+geom_point()
graph_question2+labs(
titles="Probability of winning the World Series",
x="Probability of the Braves winning a head to head matchup",
y="P(Braves) win World Series")+
theme_bw()+
theme(plot.title=element_text(hjust=0.5))
series_length <- seq(1, 9999999, 2)
for(i in 1:length(series_length)){
Pb_win<-pnbinom(ceiling(series_length[i]/2)-1,ceiling(series_length[i]/2),0.55)
if(Pb_win>=0.8){
shortest<-series_length[i]
p_shortest<-Pb_win
break
}
}
shortest
p_shortest
Pbseries <- seq(0.5,1, 0.01)
Shortest_Record<- rep(NA,length(Pbseries))
for(i in 1:length(Pbseries)){
for(j in 1:length(series_length)){
Pb_win<-pnbinom(ceiling(series_length[j]/2)-1,ceiling(series_length[j]/2),Pbseries[i])
if(Pb_win>=0.8){
shortest<-series_length[j]
break}
}
Shortest_Record[i]<-shortest
}
Pbseries
Shortest_Record
data2<-data.frame(Pbseries,Shortest_Record)
data2
graph_question4<-ggplot(data2,aes(x=Pbseries,y=Shortest_Record))+geom_point()
graph_question4+labs(
titles="Shortest series so that P(Win WS given p)>=0.8",
x="Probability of the Braves winning a head to head matchup",
y="Series length")+
theme_bw()+
theme(plot.title=element_text(hjust=0.5))
prob_Braves_win_in_games<-(dnbinom(3,4,0.45)+dnbinom(3,4,0.55))/2
prob_Braves_win_in_games
prob_Braves_win_in_games_Pb
prob_Braves_win_in_games_Pb<-dnbinom(3,4,0.55)
prob_Braves_win_in_games_Pb*0.5/prob_Braves_win_in_games
knitr::opts_chunk$set(echo = TRUE)
Pb<- 0.55
Py<- 1-Pb
Brave_Win_Prob<-
dnbinom(0,4,Pb)+
dnbinom(1,4,Pb)+
dnbinom(2,4,Pb)+
dnbinom(3,4,Pb)
Brave_Win_Prob
Pbseries <- seq(0.5,1, 0.01)
B_win_Prob <- rep(NA,length(Pbseries))
for(i in 1:length(Pbseries)){
B_win_Prob[i]<-
dnbinom(0,4,Pbseries[i])+
dnbinom(1,4,Pbseries[i])+
dnbinom(2,4,Pbseries[i])+
dnbinom(3,4,Pbseries[i])
}
Pbseries
B_win_Prob
data<-data.frame(Pbseries,B_win_Prob)
data
require(ggplot2)
graph_question2<-ggplot(data,aes(x=Pbseries,y=B_win_Prob))+geom_point()
graph_question2+labs(
titles="Probability of winning the World Series",
x="Probability of the Braves winning a head to head matchup",
y="P(Braves) win World Series")+
theme_bw()+
theme(plot.title=element_text(hjust=0.5))
series_length <- seq(1, 9999999, 2)
for(i in 1:length(series_length)){
Pb_win<-pnbinom(ceiling(series_length[i]/2)-1,ceiling(series_length[i]/2),0.55)
if(Pb_win>=0.8){
shortest<-series_length[i]
p_shortest<-Pb_win
break
}
}
shortest
p_shortest
Pbseries <- seq(0.5,1, 0.01)
Shortest_Record<- rep(NA,length(Pbseries))
for(i in 1:length(Pbseries)){
for(j in 1:length(series_length)){
Pb_win<-pnbinom(ceiling(series_length[j]/2)-1,ceiling(series_length[j]/2),Pbseries[i])
if(Pb_win>=0.8){
shortest<-series_length[j]
break}
}
Shortest_Record[i]<-shortest
}
Pbseries
Shortest_Record
data2<-data.frame(Pbseries,Shortest_Record)
data2
graph_question4<-ggplot(data2,aes(x=Pbseries,y=Shortest_Record))+geom_point()
graph_question4+labs(
titles="Shortest series so that P(Win WS given p)>=0.8",
x="Probability of the Braves winning a head to head matchup",
y="Series length")+
theme_bw()+
theme(plot.title=element_text(hjust=0.5))
prob_Braves_win_in_games<-(dnbinom(3,4,0.45)+dnbinom(3,4,0.55))/2
prob_Braves_win_in_games
prob_Braves_win_in_games_Pb
prob_Braves_win_in_games_Pb<-dnbinom(3,4,0.55)
prob_Braves_win_in_games_Pb*0.5/prob_Braves_win_in_games
