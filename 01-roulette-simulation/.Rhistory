# For loop of plays
for(i in 1:L){
new_state <- state %>% one_play
budget[i] <- new_state$B
if(new_state %>% stop_play){
return(budget[1:i])
}
state <- new_state
}
budget
}
# helper function
get_last <- function(x) x[length(x)]
#average number of plays before stopping
runing_time <- rep(NA, 1000)
for(i in seq_along(runing_time)){
ledger <- one_series(200,200,300,500)
runing_time[i] <-as.numeric(count(na.omit(ledger,"game_index")))
}
# Simulation
walk_out_money <- rep(NA, 10000)
for(j in seq_along(walk_out_money)){
walk_out_money[j] <- one_series(B = 200, W = 300, L = 1000, M = 100) %>% get_last
}
# Estimated earnings
mean(walk_out_money - 200)
# Simulation
walk_out_money <- rep(NA, 10000)
for(j in seq_along(walk_out_money)){
walk_out_money[j] <- one_series(B = 500, W = 600, L = 1000, M = 100) %>% get_last
}
mean(walk_out_money - 600)
mean(walk_out_money > 600)
mean(walk_out_money > 500)
# Walk out money distribution
hist(walk_out_money, breaks = 100)
# Estimated earnings
mean(walk_out_money - 200)
# Estimated earnings
mean(walk_out_money > 200)
# Walk out money distribution
hist(walk_out_money, breaks = 100)
# Simulation
walk_out_money <- rep(NA, 10000)
for(j in seq_along(walk_out_money)){
walk_out_money[j] <- one_series(B = 500, W = 600, L = 1000, M = 100) %>% get_last
}
mean(walk_out_money - 600)
# Walk out money distribution
hist(walk_out_money, breaks = 100)
# Simulation
walk_out_money <- rep(NA, 10000)
for(j in seq_along(walk_out_money)){
walk_out_money[j] <- one_series(B = 500, W = 600, L = 1000, M = 100) %>% get_last
}
mean(walk_out_money - 600)
# Walk out money distribution
hist(walk_out_money, breaks = 100)
# Simulation
walk_out_money <- rep(NA, 10000)
for(j in seq_along(walk_out_money)){
walk_out_money[j] <- one_series(B = 500, W = 600, L = 1000, M = 10) %>% get_last
}
# Walk out money distribution
hist(walk_out_money, breaks = 100)
# Estimated probability of walking out with extra cash
mean(walk_out_money > 500)
# Estimated earnings
mean(walk_out_money - 600)
# Walk out money distribution
hist(walk_out_money, breaks = 500)
# Walk out money distribution
hist(walk_out_money, breaks = 500)
mean(walk_out_money > 500)
mean(walk_out_money - 600)
# Simulation
walk_out_money <- rep(NA, 10000)
for(j in seq_along(walk_out_money)){
walk_out_money[j] <- one_series(B = 500, W = 600, L = 1000, M = 100) %>% get_last
}
# Walk out money distribution
hist(walk_out_money, breaks = 500)
mean(walk_out_money - 600)
# Walk out money distribution
hist(walk_out_money, breaks = 500)
mean(walk_out_money > 500)
# Walk out money distribution
hist(walk_out_money, breaks = 100)
# Simulation
walk_out_money <- rep(NA, 10000)
for(j in seq_along(walk_out_money)){
walk_out_money[j] <- one_series(B = 500, W = 600, L = 1000, M = 10) %>% get_last
}
# Walk out money distribution
hist(walk_out_money, breaks = 100)
# Estimated probability of walking out with extra cash
mean(walk_out_money > 500)
# Estimated earnings
mean(walk_out_money - 600)
# Simulation
walk_out_money <- rep(NA, 10000)
for(j in seq_along(walk_out_money)){
walk_out_money[j] <- one_series(B = 500, W = 600, L = 1000, M = 100) %>% get_last
}
# Simulation
walk_out_money <- rep(NA, 100)
for(j in seq_along(walk_out_money)){
walk_out_money[j] <- one_series(B = 500, W = 600, L = 1000, M = 100) %>% get_last
}
mean(walk_out_money - 600)
# Walk out money distribution
hist(walk_out_money, breaks = 100)
# Simulation
walk_out_money <- rep(NA, 1000)
for(j in seq_along(walk_out_money)){
walk_out_money[j] <- one_series(B = 500, W = 600, L = 1000, M = 100) %>% get_last
}
mean(walk_out_money - 600)
# Walk out money distribution
hist(walk_out_money, breaks = 100)
walk_out_money <- rep(NA, 100)
for(j in seq_along(walk_out_money)){
walk_out_money[j] <- one_series(B = 200, W = 300, L = 500, M = 100) %>% get_last
}
mean(walk_out_money - 300)
# Walk out money distribution
hist(walk_out_money, breaks = 100)
mean(walk_out_money > 200)
mean(walk_out_money > 200)
mean(walk_out_money - 300)
one_play <- function(state){
# Wager
proposed_wager <- ifelse(state$previous_win, 1, 2*state$previous_wager)
wager <- min(proposed_wager, state$M, state$B)
# Spin of the wheel
red <- rbinom(1,1,18/38)
# Update state
state$plays <- state$plays + 1
state$previous_wager <- wager
if(red){
# WIN
state$B <- state$B + wager
state$previous_win <- TRUE
}else{
# LOSE
state$B <- state$B - wager
state$previous_win <- FALSE
}
state
}
stop_play <- function(state){
if(state$B <= 0) return(TRUE)
if(state$plays >= state$L) return(TRUE)
if(state$B >= state$W) return(TRUE)
FALSE
}
one_series <- function(
B = 200
, W = 300
, L = 1000
, M = 100
){
# initial state
state <- list(
B = B
, W = W
, L = L
, M = M
, plays = 0
, previous_wager = 0
, previous_win = TRUE
)
# vector to store budget over series of plays
budget <- rep(NA, L)
# For loop of plays
for(i in 1:L){
new_state <- state %>% one_play
budget[i] <- new_state$B
if(new_state %>% stop_play){
return(budget[1:i])
}
state <- new_state
}
budget
}
# helper function
get_last <- function(x) x[length(x)]
single_spin <- function(){
possible_outcomes <- c(rep("red",18), rep("black",18), rep("green",2))
sample(possible_outcomes, 1)
}
martingale_wager <- function(
previous_wager
, previous_outcome
, max_wager
, current_budget
){
if(previous_outcome == "red") return(1)
min(2*previous_wager, max_wager, current_budget)
}
one_play <- function(previous_ledger_entry, max_wager){
# Create a copy of the input object that will become the output object
out <- previous_ledger_entry
out[1, "game_index"] <- previous_ledger_entry[1, "game_index"] + 1
out[1, "starting_budget"] <- previous_ledger_entry[1, "ending_budget"]
out[1, "wager"] <- martingale_wager(
previous_wager = previous_ledger_entry[1, "wager"]
, previous_outcome = previous_ledger_entry[1, "outcome"]
, max_wager = max_wager
, current_budget = out[1, "starting_budget"]
)
out[1, "outcome"] <- single_spin()
out[1, "ending_budget"] <- out[1, "starting_budget"] +
ifelse(out[1, "outcome"] == "red", +1, -1)*out[1, "wager"]
return(out)
}
one_series <- function(
max_games, starting_budget, winning_threshold, max_wager
){
# Initialize ledger
ledger <- data.frame(
game_index = 0:max_games
, starting_budget = NA_integer_
, wager = NA_integer_
, outcome = NA_character_
, ending_budget = NA_integer_
)
ledger[1, "wager"] <- 1
ledger[1, "outcome"] <- "red"
ledger[1, "ending_budget"] <- starting_budget
for(i in 2:nrow(ledger)){
#browser()
ledger[i,] <- one_play(ledger[i-1,], max_wager)
if(stopping_rule(ledger[i,], winning_threshold)) break
}
# Return non-empty portion of ledger
ledger[2:i, ]
}
stopping_rule <- function(
ledger_entry
, winning_threshold
){
ending_budget <- ledger_entry[1, "ending_budget"]
if(ending_budget <= 0) return(TRUE)
if(ending_budget >= winning_threshold) return(TRUE)
FALSE
}
profit <- function(ledger){
n <- nrow(ledger)
profit <- ledger[n, "ending_budget"] - ledger[1, "starting_budget"]
return(profit)
}
require(magrittr)
require (dplyr)
svg(filename = "loser.svg", width=16, height =9)
par(cex.axis=2, cex.lab = 2, mar = c(8,8,2,2), bg = rgb(222, 235, 247, max = 255))
set.seed(1)
ledger <- one_series(200,200,300,500)
plot(ledger[,c(1,5)], type = "l", lwd = 5, xlab = "Game Index", ylab = "Budget")
svg(filename = "winner.svg", width=16, height =9)
par(cex.axis=2, cex.lab = 2, mar = c(8,8,2,2), bg = rgb(222, 235, 247, max = 255))
set.seed(2)
l2 <- one_series(200,200,300,500)
plot(l2[,c(1,5)], type = "l", lwd = 5, xlab = "Game Index", ylab = "Budget")
#average number of plays before stopping
runing_time <- rep(NA, 1000)
for(i in seq_along(runing_time)){
ledger <- one_series(200,200,300,500)
runing_time[i] <-as.numeric(count(na.omit(ledger,"game_index")))
}
mean(runing_time)
profit(ledger)
as.numeric(count(na.omit(ledger,"game_index")))
as.numeric(count(na.omit(l2,"game_index")))
# Simulation
walk_out_money <- rep(NA, 10000)
for(j in seq_along(walk_out_money)){
walk_out_money[j] <- one_series(B = 200, W = 300, L = 1000, M = 100) %>% get_last
}
single_spin <- function(){
possible_outcomes <- c(rep("red",18), rep("black",18), rep("green",2))
sample(possible_outcomes, 1)
}
martingale_wager <- function(
previous_wager
, previous_outcome
, max_wager
, current_budget
){
if(previous_outcome == "red") return(1)
min(2*previous_wager, max_wager, current_budget)
}
one_play <- function(previous_ledger_entry, max_wager){
# Create a copy of the input object that will become the output object
out <- previous_ledger_entry
out[1, "game_index"] <- previous_ledger_entry[1, "game_index"] + 1
out[1, "starting_budget"] <- previous_ledger_entry[1, "ending_budget"]
out[1, "wager"] <- martingale_wager(
previous_wager = previous_ledger_entry[1, "wager"]
, previous_outcome = previous_ledger_entry[1, "outcome"]
, max_wager = max_wager
, current_budget = out[1, "starting_budget"]
)
out[1, "outcome"] <- single_spin()
out[1, "ending_budget"] <- out[1, "starting_budget"] +
ifelse(out[1, "outcome"] == "red", +1, -1)*out[1, "wager"]
return(out)
}
one_series <- function(
max_games, starting_budget, winning_threshold, max_wager
){
# Initialize ledger
ledger <- data.frame(
game_index = 0:max_games
, starting_budget = NA_integer_
, wager = NA_integer_
, outcome = NA_character_
, ending_budget = NA_integer_
)
ledger[1, "wager"] <- 1
ledger[1, "outcome"] <- "red"
ledger[1, "ending_budget"] <- starting_budget
for(i in 2:nrow(ledger)){
#browser()
ledger[i,] <- one_play(ledger[i-1,], max_wager)
if(stopping_rule(ledger[i,], winning_threshold)) break
}
# Return non-empty portion of ledger
ledger[2:i, ]
}
stopping_rule <- function(
ledger_entry
, winning_threshold
){
ending_budget <- ledger_entry[1, "ending_budget"]
if(ending_budget <= 0) return(TRUE)
if(ending_budget >= winning_threshold) return(TRUE)
FALSE
}
profit <- function(ledger){
n <- nrow(ledger)
profit <- ledger[n, "ending_budget"] - ledger[1, "starting_budget"]
return(profit)
}
require(magrittr)
require (dplyr)
svg(filename = "loser.svg", width=16, height =9)
par(cex.axis=2, cex.lab = 2, mar = c(8,8,2,2), bg = rgb(222, 235, 247, max = 255))
set.seed(1)
ledger <- one_series(200,200,300,500)
plot(ledger[,c(1,5)], type = "l", lwd = 5, xlab = "Game Index", ylab = "Budget")
svg(filename = "winner.svg", width=16, height =9)
par(cex.axis=2, cex.lab = 2, mar = c(8,8,2,2), bg = rgb(222, 235, 247, max = 255))
set.seed(2)
l2 <- one_series(200,200,300,500)
plot(l2[,c(1,5)], type = "l", lwd = 5, xlab = "Game Index", ylab = "Budget")
#average number of plays before stopping
runing_time <- rep(NA, 1000)
for(i in seq_along(runing_time)){
ledger <- one_series(200,200,300,500)
runing_time[i] <-as.numeric(count(na.omit(ledger,"game_index")))
}
mean(runing_time)
profit(ledger)
as.numeric(count(na.omit(ledger,"game_index")))
as.numeric(count(na.omit(l2,"game_index")))
# Simulation
one_play <- function(state){
# Wager
proposed_wager <- ifelse(state$previous_win, 1, 2*state$previous_wager)
wager <- min(proposed_wager, state$M, state$B)
# Spin of the wheel
red <- rbinom(1,1,18/38)
# Update state
state$plays <- state$plays + 1
state$previous_wager <- wager
if(red){
# WIN
state$B <- state$B + wager
state$previous_win <- TRUE
}else{
# LOSE
state$B <- state$B - wager
state$previous_win <- FALSE
}
state
}
stop_play <- function(state){
if(state$B <= 0) return(TRUE)
if(state$plays >= state$L) return(TRUE)
if(state$B >= state$W) return(TRUE)
FALSE
}
one_series <- function(
B = 200
, W = 300
, L = 1000
, M = 100
){
# initial state
state <- list(
B = B
, W = W
, L = L
, M = M
, plays = 0
, previous_wager = 0
, previous_win = TRUE
)
# vector to store budget over series of plays
budget <- rep(NA, L)
# For loop of plays
for(i in 1:L){
new_state <- state %>% one_play
budget[i] <- new_state$B
if(new_state %>% stop_play){
return(budget[1:i])
}
state <- new_state
}
budget
}
# helper function
get_last <- function(x) x[length(x)]
walk_out_money <- rep(NA, 10000)
for(j in seq_along(walk_out_money)){
walk_out_money[j] <- one_series(B = 200, W = 300, L = 1000, M = 100) %>% get_last
}
# Estimated earnings
mean(walk_out_money - 200)
# Walk out money distribution
hist(walk_out_money, breaks = 100)
# Estimated earnings
mean(walk_out_money > 200)
# Simulation
walk_out_money <- rep(NA, 10000)
for(j in seq_along(walk_out_money)){
walk_out_money[j] <- one_series(B = 500, W = 600, L = 1000, M = 100) %>% get_last
}
mean(walk_out_money - 600)
# Walk out money distribution
hist(walk_out_money, breaks = 100)
mean(walk_out_money > 500)
one_play <- function(state){
# Wager
proposed_wager <- ifelse(state$previous_win, 1, 2*state$previous_wager)
wager <- min(proposed_wager, state$M, state$B)
# Spin of the wheel
red <- rbinom(1,1,18/38)
# Update state
state$plays <- state$plays + 1
state$previous_wager <- wager
if(red){
# WIN
state$B <- state$B + wager
state$previous_win <- TRUE
}else{
# LOSE
state$B <- state$B - wager
state$previous_win <- FALSE
}
state
}
stop_play <- function(state){
if(state$B <= 0) return(TRUE)
if(state$plays >= state$L) return(TRUE)
if(state$B >= state$W) return(TRUE)
FALSE
}
one_series <- function(
B = 200
, W = 300
, L = 1000
, M = 100
){
# initial state
state <- list(
B = B
, W = W
, L = L
, M = M
, plays = 0
, previous_wager = 0
, previous_win = TRUE
)
# vector to store budget over series of plays
budget <- rep(NA, L)
# For loop of plays
for(i in 1:L){
new_state <- state %>% one_play
budget[i] <- new_state$B
if(new_state %>% stop_play){
return(budget[1:i])
}
state <- new_state
}
budget
}
# helper function
get_last <- function(x) x[length(x)]
walk_out_money <- rep(NA, 100)
for(j in seq_along(walk_out_money)){
walk_out_money[j] <- one_series(B = 200, W = 300, L = 500, M = 100) %>% get_last
}
mean(walk_out_money - 300)
# Walk out money distribution
hist(walk_out_money, breaks = 100)
mean(walk_out_money > 200)
single_spin <- function(){
possible_outcomes <- c(rep("red",18), rep("black",18), rep("green",2))
sample(possible_outcomes, 1)
}
